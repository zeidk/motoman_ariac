Prefix(:=<http://www.nist.gov/el/ontologies/DemoKittingWorkstationClasses.owl#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.nist.gov/el/ontologies/DemoKittingWorkstationClasses.owl>
Annotation(rdfs:comment "This kitting ontology models a kitting workstation including objects
  in the workstation and data associated with the workstation. The
  ontology assumes coordinate systems are right handed. For objects
  such as parts vessels or a robot with a preferred orientation with
  respect to gravity, the Z axis points up (opposite the pull of
  gravity).")
Annotation(rdfs:comment "owlPrefix=ktw")

Declaration(Class(:BoxVolume))
Declaration(Class(:BoxyShape))
Declaration(Class(:CylindricalShape))
Declaration(Class(:DataThing))
Declaration(Class(:EndEffector))
Declaration(Class(:EndEffectorChangingStation))
Declaration(Class(:EndEffectorGrasp))
Declaration(Class(:EndEffectorHolder))
Declaration(Class(:ExternalShape))
Declaration(Class(:GripperEffector))
Declaration(Class(:GripperOther))
Declaration(Class(:GripperParallel))
Declaration(Class(:GripperThreeFinger))
Declaration(Class(:GripperTwoJaws))
Declaration(Class(:Human))
Declaration(Class(:InternalShape))
Declaration(Class(:KittingWorkstation))
Declaration(Class(:LargeBoxWithEmptyVessels))
Declaration(Class(:LargeBoxWithPartsTrays))
Declaration(Class(:LargeContainer))
Declaration(Class(:Marking))
Declaration(Class(:MarkingLayout))
Declaration(Class(:MarkingModel))
Declaration(Class(:NoSkuObject))
Declaration(Class(:OtherGripperGrasp))
Declaration(Class(:ParallelGripperGrasp))
Declaration(Class(:Part))
Declaration(Class(:PartRefAndPose))
Declaration(Class(:PartsBin))
Declaration(Class(:PartsTray))
Declaration(Class(:PartsTrayDesign))
Declaration(Class(:PartsVessel))
Declaration(Class(:PhysicalLocation))
Declaration(Class(:Point))
Declaration(Class(:Polygon2D))
Declaration(Class(:Pose))
Declaration(Class(:PoseLocation))
Declaration(Class(:PoseLocationIn))
Declaration(Class(:PoseLocationOn))
Declaration(Class(:PoseOnlyLocation))
Declaration(Class(:PoseTolerance))
Declaration(Class(:RelativeLocationIn))
Declaration(Class(:RelativeLocationOn))
Declaration(Class(:Robot))
Declaration(Class(:ShapeDesign))
Declaration(Class(:SkuObject))
Declaration(Class(:Slot))
Declaration(Class(:SolidObject))
Declaration(Class(:StockKeepingUnit))
Declaration(Class(:ThreeFingerGrasp))
Declaration(Class(:TwoJawsGrasp))
Declaration(Class(:VacuumEffector))
Declaration(Class(:VacuumEffectorMultiCup))
Declaration(Class(:VacuumEffectorSingleCup))
Declaration(Class(:VacuumEffectorSingleGrasp))
Declaration(Class(:Vector))
Declaration(Class(:WorkTable))
Declaration(ObjectProperty(:hadByBase_EndEffectorChangingStation))
Declaration(ObjectProperty(:hadByChangingStation_KittingWorkstation))
Declaration(ObjectProperty(:hadByDesign_PartsTray))
Declaration(ObjectProperty(:hadByEffectorAndGrasp_NoSkuObject))
Declaration(ObjectProperty(:hadByEffectorAndGrasp_StockKeepingUnit))
Declaration(ObjectProperty(:hadByEndEffectorHolder_EndEffectorChangingStation))
Declaration(ObjectProperty(:hadByEndEffector_EndEffectorHolder))
Declaration(ObjectProperty(:hadByEndEffector_Robot))
Declaration(ObjectProperty(:hadByExternalShape_NoSkuObject))
Declaration(ObjectProperty(:hadByExternalShape_StockKeepingUnit))
Declaration(ObjectProperty(:hadByGraspPose1_ThreeFingerGrasp))
Declaration(ObjectProperty(:hadByGraspPose1_TwoJawsGrasp))
Declaration(ObjectProperty(:hadByGraspPose2_ThreeFingerGrasp))
Declaration(ObjectProperty(:hadByGraspPose2_TwoJawsGrasp))
Declaration(ObjectProperty(:hadByGraspPose3_ThreeFingerGrasp))
Declaration(ObjectProperty(:hadByGraspPose_OtherGripperGrasp))
Declaration(ObjectProperty(:hadByGraspPose_ParallelGripperGrasp))
Declaration(ObjectProperty(:hadByGraspPose_VacuumEffectorSingleGrasp))
Declaration(ObjectProperty(:hadByHeldObjectOffset_EndEffector))
Declaration(ObjectProperty(:hadByHeldObject_EndEffector))
Declaration(ObjectProperty(:hadByInternalShape_NoSkuObject))
Declaration(ObjectProperty(:hadByInternalShape_StockKeepingUnit))
Declaration(ObjectProperty(:hadByLargeContainer_LargeBoxWithEmptyVessels))
Declaration(ObjectProperty(:hadByLargeContainer_LargeBoxWithPartsTrays))
Declaration(ObjectProperty(:hadByMarkingLayout_Marking))
Declaration(ObjectProperty(:hadByMarkingModel_Marking))
Declaration(ObjectProperty(:hadByMarking_ShapeDesign))
Declaration(ObjectProperty(:hadByMaximumPoint_BoxVolume))
Declaration(ObjectProperty(:hadByMinimumPoint_BoxVolume))
Declaration(ObjectProperty(:hadByObjectOnTable_WorkTable))
Declaration(ObjectProperty(:hadByObject_KittingWorkstation))
Declaration(ObjectProperty(:hadByOtherGripper_OtherGripperGrasp))
Declaration(ObjectProperty(:hadByOtherObstacle_KittingWorkstation))
Declaration(ObjectProperty(:hadByParallelGripper_ParallelGripperGrasp))
Declaration(ObjectProperty(:hadByPartRefAndPose_PartsTrayDesign))
Declaration(ObjectProperty(:hadByPartRefAndPose_Slot))
Declaration(ObjectProperty(:hadByPartSku_PartsBin))
Declaration(ObjectProperty(:hadByPart_PartsVessel))
Declaration(ObjectProperty(:hadByPart_Slot))
Declaration(ObjectProperty(:hadByPartsTrayDesign_KittingWorkstation))
Declaration(ObjectProperty(:hadByPartsTrayDesign_LargeBoxWithPartsTrays))
Declaration(ObjectProperty(:hadByPartsTray_LargeBoxWithPartsTrays))
Declaration(ObjectProperty(:hadByPoint_MarkingLayout))
Declaration(ObjectProperty(:hadByPoint_Pose))
Declaration(ObjectProperty(:hadByPose_PartRefAndPose))
Declaration(ObjectProperty(:hadByPose_PoseLocation))
Declaration(ObjectProperty(:hadByPrimaryLocation_SolidObject))
Declaration(ObjectProperty(:hadByRefObject_PhysicalLocation))
Declaration(ObjectProperty(:hadByRobot_KittingWorkstation))
Declaration(ObjectProperty(:hadBySecondaryLocation_SolidObject))
Declaration(ObjectProperty(:hadBySku_KittingWorkstation))
Declaration(ObjectProperty(:hadBySku_PartRefAndPose))
Declaration(ObjectProperty(:hadBySku_SkuObject))
Declaration(ObjectProperty(:hadBySlot_PartsTray))
Declaration(ObjectProperty(:hadByThreeFingerGripper_ThreeFingerGrasp))
Declaration(ObjectProperty(:hadByTolerance_PoseOnlyLocation))
Declaration(ObjectProperty(:hadByTwoJawsGripper_TwoJawsGrasp))
Declaration(ObjectProperty(:hadByVacuumEffectorSingle_VacuumEffectorSingleGrasp))
Declaration(ObjectProperty(:hadByVesselSku_PartsTrayDesign))
Declaration(ObjectProperty(:hadByVessel_LargeBoxWithEmptyVessels))
Declaration(ObjectProperty(:hadByWorkVolume_Robot))
Declaration(ObjectProperty(:hadByXAxis_MarkingLayout))
Declaration(ObjectProperty(:hadByXAxis_Pose))
Declaration(ObjectProperty(:hadByYAxis_MarkingLayout))
Declaration(ObjectProperty(:hadByZAxis_Pose))
Declaration(ObjectProperty(:hasBoxVolume_MaximumPoint))
Declaration(ObjectProperty(:hasBoxVolume_MinimumPoint))
Declaration(ObjectProperty(:hasEndEffectorChangingStation_Base))
Declaration(ObjectProperty(:hasEndEffectorChangingStation_EndEffectorHolder))
Declaration(ObjectProperty(:hasEndEffectorHolder_EndEffector))
Declaration(ObjectProperty(:hasEndEffector_HeldObject))
Declaration(ObjectProperty(:hasEndEffector_HeldObjectOffset))
Declaration(ObjectProperty(:hasKittingWorkstation_ChangingStation))
Declaration(ObjectProperty(:hasKittingWorkstation_Object))
Declaration(ObjectProperty(:hasKittingWorkstation_OtherObstacle))
Declaration(ObjectProperty(:hasKittingWorkstation_PartsTrayDesign))
Declaration(ObjectProperty(:hasKittingWorkstation_Robot))
Declaration(ObjectProperty(:hasKittingWorkstation_Sku))
Declaration(ObjectProperty(:hasLargeBoxWithEmptyVessels_LargeContainer))
Declaration(ObjectProperty(:hasLargeBoxWithEmptyVessels_Vessel))
Declaration(ObjectProperty(:hasLargeBoxWithPartsTrays_LargeContainer))
Declaration(ObjectProperty(:hasLargeBoxWithPartsTrays_PartsTray))
Declaration(ObjectProperty(:hasLargeBoxWithPartsTrays_PartsTrayDesign))
Declaration(ObjectProperty(:hasMarkingLayout_Point))
Declaration(ObjectProperty(:hasMarkingLayout_XAxis))
Declaration(ObjectProperty(:hasMarkingLayout_YAxis))
Declaration(ObjectProperty(:hasMarking_MarkingLayout))
Declaration(ObjectProperty(:hasMarking_MarkingModel))
Declaration(ObjectProperty(:hasNoSkuObject_EffectorAndGrasp))
Declaration(ObjectProperty(:hasNoSkuObject_ExternalShape))
Declaration(ObjectProperty(:hasNoSkuObject_InternalShape))
Declaration(ObjectProperty(:hasOtherGripperGrasp_GraspPose))
Declaration(ObjectProperty(:hasOtherGripperGrasp_OtherGripper))
Declaration(ObjectProperty(:hasParallelGripperGrasp_GraspPose))
Declaration(ObjectProperty(:hasParallelGripperGrasp_ParallelGripper))
Declaration(ObjectProperty(:hasPartRefAndPose_Pose))
Declaration(ObjectProperty(:hasPartRefAndPose_Sku))
Declaration(ObjectProperty(:hasPartsBin_PartSku))
Declaration(ObjectProperty(:hasPartsTrayDesign_PartRefAndPose))
Declaration(ObjectProperty(:hasPartsTrayDesign_VesselSku))
Declaration(ObjectProperty(:hasPartsTray_Design))
Declaration(ObjectProperty(:hasPartsTray_Slot))
Declaration(ObjectProperty(:hasPartsVessel_Part))
Declaration(ObjectProperty(:hasPhysicalLocation_RefObject))
Declaration(ObjectProperty(:hasPoseLocation_Pose))
Declaration(ObjectProperty(:hasPoseOnlyLocation_Tolerance))
Declaration(ObjectProperty(:hasPose_Point))
Declaration(ObjectProperty(:hasPose_XAxis))
Declaration(ObjectProperty(:hasPose_ZAxis))
Declaration(ObjectProperty(:hasRobot_EndEffector))
Declaration(ObjectProperty(:hasRobot_WorkVolume))
Declaration(ObjectProperty(:hasShapeDesign_Marking))
Declaration(ObjectProperty(:hasSkuObject_Sku))
Declaration(ObjectProperty(:hasSlot_Part))
Declaration(ObjectProperty(:hasSlot_PartRefAndPose))
Declaration(ObjectProperty(:hasSolidObject_PrimaryLocation))
Declaration(ObjectProperty(:hasSolidObject_SecondaryLocation))
Declaration(ObjectProperty(:hasStockKeepingUnit_EffectorAndGrasp))
Declaration(ObjectProperty(:hasStockKeepingUnit_ExternalShape))
Declaration(ObjectProperty(:hasStockKeepingUnit_InternalShape))
Declaration(ObjectProperty(:hasThreeFingerGrasp_GraspPose1))
Declaration(ObjectProperty(:hasThreeFingerGrasp_GraspPose2))
Declaration(ObjectProperty(:hasThreeFingerGrasp_GraspPose3))
Declaration(ObjectProperty(:hasThreeFingerGrasp_ThreeFingerGripper))
Declaration(ObjectProperty(:hasTwoJawsGrasp_GraspPose1))
Declaration(ObjectProperty(:hasTwoJawsGrasp_GraspPose2))
Declaration(ObjectProperty(:hasTwoJawsGrasp_TwoJawsGripper))
Declaration(ObjectProperty(:hasVacuumEffectorSingleGrasp_GraspPose))
Declaration(ObjectProperty(:hasVacuumEffectorSingleGrasp_VacuumEffectorSingle))
Declaration(ObjectProperty(:hasWorkTable_ObjectOnTable))
Declaration(DataProperty(:hasBoxyShape_HasTop))
Declaration(DataProperty(:hasBoxyShape_Height))
Declaration(DataProperty(:hasBoxyShape_Length))
Declaration(DataProperty(:hasBoxyShape_Width))
Declaration(DataProperty(:hasCylindricalShape_Diameter))
Declaration(DataProperty(:hasCylindricalShape_HasTop))
Declaration(DataProperty(:hasCylindricalShape_Height))
Declaration(DataProperty(:hasEndEffectorHolder_EndEffectorSlot))
Declaration(DataProperty(:hasEndEffector_Description))
Declaration(DataProperty(:hasEndEffector_MaximumLoadWeight))
Declaration(DataProperty(:hasExternalShape_ModelFileName))
Declaration(DataProperty(:hasExternalShape_ModelFormatName))
Declaration(DataProperty(:hasExternalShape_ModelName))
Declaration(DataProperty(:hasGripperEffector_MaxGripWidth))
Declaration(DataProperty(:hasKittingWorkstation_AngleUnit))
Declaration(DataProperty(:hasKittingWorkstation_LengthUnit))
Declaration(DataProperty(:hasKittingWorkstation_WeightUnit))
Declaration(DataProperty(:hasLargeBoxWithPartsTrays_Capacity))
Declaration(DataProperty(:hasLargeContainer_SerialNumber))
Declaration(DataProperty(:hasMarkingModel_MarkingFileName))
Declaration(DataProperty(:hasMarkingModel_MarkingFormatName))
Declaration(DataProperty(:hasMarkingModel_MarkingName))
Declaration(DataProperty(:hasNoSkuObject_Weight))
Declaration(DataProperty(:hasOtherGripperGrasp_MaxForce))
Declaration(DataProperty(:hasOtherGripperGrasp_MinForce))
Declaration(DataProperty(:hasParallelGripperGrasp_ApproachSeparation))
Declaration(DataProperty(:hasParallelGripperGrasp_GraspSeparation))
Declaration(DataProperty(:hasPart_SerialNumber))
Declaration(DataProperty(:hasPartsBin_PartQuantity))
Declaration(DataProperty(:hasPartsTray_Complete))
Declaration(DataProperty(:hasPartsVessel_SerialNumber))
Declaration(DataProperty(:hasPartsVessel_Weight))
Declaration(DataProperty(:hasPhysicalLocation_Timestamp))
Declaration(DataProperty(:hasPoint_X))
Declaration(DataProperty(:hasPoint_Y))
Declaration(DataProperty(:hasPoint_Z))
Declaration(DataProperty(:hasPolygon2D_X))
Declaration(DataProperty(:hasPolygon2D_Y))
Declaration(DataProperty(:hasPoseLocation_OrientationStandardDeviation))
Declaration(DataProperty(:hasPoseLocation_PositionStandardDeviation))
Declaration(DataProperty(:hasPoseTolerance_XAxisTolerance))
Declaration(DataProperty(:hasPoseTolerance_XPointTolerance))
Declaration(DataProperty(:hasPoseTolerance_YPointTolerance))
Declaration(DataProperty(:hasPoseTolerance_ZAxisTolerance))
Declaration(DataProperty(:hasPoseTolerance_ZPointTolerance))
Declaration(DataProperty(:hasRelativeLocationIn_Description))
Declaration(DataProperty(:hasRelativeLocationOn_Description))
Declaration(DataProperty(:hasRobot_Description))
Declaration(DataProperty(:hasRobot_MaximumLoadWeight))
Declaration(DataProperty(:hasShapeDesign_Description))
Declaration(DataProperty(:hasSlot_ID))
Declaration(DataProperty(:hasSlot_IsOccupied))
Declaration(DataProperty(:hasStockKeepingUnit_Description))
Declaration(DataProperty(:hasStockKeepingUnit_Weight))
Declaration(DataProperty(:hasThreeFingerGrasp_MaxForce))
Declaration(DataProperty(:hasThreeFingerGrasp_MinForce))
Declaration(DataProperty(:hasTwoJawsGrasp_MaxForce))
Declaration(DataProperty(:hasTwoJawsGrasp_MinForce))
Declaration(DataProperty(:hasVacuumEffectorMultiCup_ArrayNumber))
Declaration(DataProperty(:hasVacuumEffectorMultiCup_ArrayRadius))
Declaration(DataProperty(:hasVacuumEffector_CupDiameter))
Declaration(DataProperty(:hasVacuumEffector_Length))
Declaration(DataProperty(:hasVector_I))
Declaration(DataProperty(:hasVector_J))
Declaration(DataProperty(:hasVector_K))
Declaration(NamedIndividual(:design_gasket_tray))
Declaration(NamedIndividual(:design_gear_tray))
Declaration(NamedIndividual(:design_kit_tray))
Declaration(NamedIndividual(:design_piston_rod_tray))
Declaration(NamedIndividual(:gasket_part_shape))
Declaration(NamedIndividual(:gasket_tray))
Declaration(NamedIndividual(:gasket_tray_location))
Declaration(NamedIndividual(:gasket_tray_point))
Declaration(NamedIndividual(:gasket_tray_pose))
Declaration(NamedIndividual(:gasket_tray_shape))
Declaration(NamedIndividual(:gasket_tray_slot_1))
Declaration(NamedIndividual(:gasket_tray_slot_2))
Declaration(NamedIndividual(:gasket_tray_slot_3))
Declaration(NamedIndividual(:gasket_tray_slot_4))
Declaration(NamedIndividual(:gasket_tray_x_axis))
Declaration(NamedIndividual(:gasket_tray_z_axis))
Declaration(NamedIndividual(:gear_part_shape))
Declaration(NamedIndividual(:gear_tray))
Declaration(NamedIndividual(:gear_tray_location))
Declaration(NamedIndividual(:gear_tray_point))
Declaration(NamedIndividual(:gear_tray_pose))
Declaration(NamedIndividual(:gear_tray_shape))
Declaration(NamedIndividual(:gear_tray_slot_1))
Declaration(NamedIndividual(:gear_tray_slot_2))
Declaration(NamedIndividual(:gear_tray_slot_3))
Declaration(NamedIndividual(:gear_tray_slot_4))
Declaration(NamedIndividual(:gear_tray_x_axis))
Declaration(NamedIndividual(:gear_tray_z_axis))
Declaration(NamedIndividual(:kit_tray))
Declaration(NamedIndividual(:kit_tray_location))
Declaration(NamedIndividual(:kit_tray_point))
Declaration(NamedIndividual(:kit_tray_pose))
Declaration(NamedIndividual(:kit_tray_shape))
Declaration(NamedIndividual(:kit_tray_x_axis))
Declaration(NamedIndividual(:kit_tray_z_axis))
Declaration(NamedIndividual(:motoman_box_volume_1))
Declaration(NamedIndividual(:motoman_max_point))
Declaration(NamedIndividual(:motoman_min_point))
Declaration(NamedIndividual(:motoman_workstation))
Declaration(NamedIndividual(:optical_table))
Declaration(NamedIndividual(:optical_table_location))
Declaration(NamedIndividual(:optical_table_point))
Declaration(NamedIndividual(:optical_table_pose))
Declaration(NamedIndividual(:optical_table_x_axis))
Declaration(NamedIndividual(:optical_table_z_axis))
Declaration(NamedIndividual(:part_gasket_1))
Declaration(NamedIndividual(:part_gasket_1_in_tray_point))
Declaration(NamedIndividual(:part_gasket_1_in_tray_pose))
Declaration(NamedIndividual(:part_gasket_1_in_tray_x_axis))
Declaration(NamedIndividual(:part_gasket_1_in_tray_z_axis))
Declaration(NamedIndividual(:part_gasket_1_location))
Declaration(NamedIndividual(:part_gasket_1_point))
Declaration(NamedIndividual(:part_gasket_1_pose))
Declaration(NamedIndividual(:part_gasket_1_x_axis))
Declaration(NamedIndividual(:part_gasket_1_z_axis))
Declaration(NamedIndividual(:part_gasket_2))
Declaration(NamedIndividual(:part_gasket_2_in_tray_point))
Declaration(NamedIndividual(:part_gasket_2_in_tray_pose))
Declaration(NamedIndividual(:part_gasket_2_in_tray_x_axis))
Declaration(NamedIndividual(:part_gasket_2_in_tray_z_axis))
Declaration(NamedIndividual(:part_gasket_2_location))
Declaration(NamedIndividual(:part_gasket_2_point))
Declaration(NamedIndividual(:part_gasket_2_pose))
Declaration(NamedIndividual(:part_gasket_2_x_axis))
Declaration(NamedIndividual(:part_gasket_2_z_axis))
Declaration(NamedIndividual(:part_gasket_3))
Declaration(NamedIndividual(:part_gasket_3_in_tray_point))
Declaration(NamedIndividual(:part_gasket_3_in_tray_pose))
Declaration(NamedIndividual(:part_gasket_3_in_tray_x_axis))
Declaration(NamedIndividual(:part_gasket_3_in_tray_z_axis))
Declaration(NamedIndividual(:part_gasket_3_location))
Declaration(NamedIndividual(:part_gasket_3_point))
Declaration(NamedIndividual(:part_gasket_3_pose))
Declaration(NamedIndividual(:part_gasket_3_x_axis))
Declaration(NamedIndividual(:part_gasket_3_z_axis))
Declaration(NamedIndividual(:part_gasket_4))
Declaration(NamedIndividual(:part_gasket_4_in_tray_point))
Declaration(NamedIndividual(:part_gasket_4_in_tray_pose))
Declaration(NamedIndividual(:part_gasket_4_in_tray_x_axis))
Declaration(NamedIndividual(:part_gasket_4_in_tray_z_axis))
Declaration(NamedIndividual(:part_gasket_4_location))
Declaration(NamedIndividual(:part_gasket_4_point))
Declaration(NamedIndividual(:part_gasket_4_pose))
Declaration(NamedIndividual(:part_gasket_4_x_axis))
Declaration(NamedIndividual(:part_gasket_4_z_axis))
Declaration(NamedIndividual(:part_gear_1))
Declaration(NamedIndividual(:part_gear_1_in_tray_point))
Declaration(NamedIndividual(:part_gear_1_in_tray_pose))
Declaration(NamedIndividual(:part_gear_1_in_tray_x_axis))
Declaration(NamedIndividual(:part_gear_1_in_tray_z_axis))
Declaration(NamedIndividual(:part_gear_1_location))
Declaration(NamedIndividual(:part_gear_1_point))
Declaration(NamedIndividual(:part_gear_1_pose))
Declaration(NamedIndividual(:part_gear_1_x_axis))
Declaration(NamedIndividual(:part_gear_1_z_axis))
Declaration(NamedIndividual(:part_gear_2))
Declaration(NamedIndividual(:part_gear_2_in_tray_point))
Declaration(NamedIndividual(:part_gear_2_in_tray_pose))
Declaration(NamedIndividual(:part_gear_2_in_tray_x_axis))
Declaration(NamedIndividual(:part_gear_2_in_tray_z_axis))
Declaration(NamedIndividual(:part_gear_2_location))
Declaration(NamedIndividual(:part_gear_2_point))
Declaration(NamedIndividual(:part_gear_2_pose))
Declaration(NamedIndividual(:part_gear_2_x_axis))
Declaration(NamedIndividual(:part_gear_2_z_axis))
Declaration(NamedIndividual(:part_gear_3))
Declaration(NamedIndividual(:part_gear_3_in_tray_point))
Declaration(NamedIndividual(:part_gear_3_in_tray_pose))
Declaration(NamedIndividual(:part_gear_3_in_tray_x_axis))
Declaration(NamedIndividual(:part_gear_3_in_tray_z_axis))
Declaration(NamedIndividual(:part_gear_3_location))
Declaration(NamedIndividual(:part_gear_3_point))
Declaration(NamedIndividual(:part_gear_3_pose))
Declaration(NamedIndividual(:part_gear_3_x_axis))
Declaration(NamedIndividual(:part_gear_3_z_axis))
Declaration(NamedIndividual(:part_gear_4))
Declaration(NamedIndividual(:part_gear_4_in_tray_point))
Declaration(NamedIndividual(:part_gear_4_in_tray_pose))
Declaration(NamedIndividual(:part_gear_4_in_tray_x_axis))
Declaration(NamedIndividual(:part_gear_4_in_tray_z_axis))
Declaration(NamedIndividual(:part_gear_4_location))
Declaration(NamedIndividual(:part_gear_4_point))
Declaration(NamedIndividual(:part_gear_4_pose))
Declaration(NamedIndividual(:part_gear_4_x_axis))
Declaration(NamedIndividual(:part_gear_4_z_axis))
Declaration(NamedIndividual(:part_in_tray_tolerance))
Declaration(NamedIndividual(:part_piston_rod_1))
Declaration(NamedIndividual(:part_piston_rod_1_in_tray_point))
Declaration(NamedIndividual(:part_piston_rod_1_in_tray_pose))
Declaration(NamedIndividual(:part_piston_rod_1_in_tray_x_axis))
Declaration(NamedIndividual(:part_piston_rod_1_in_tray_z_axis))
Declaration(NamedIndividual(:part_piston_rod_1_location))
Declaration(NamedIndividual(:part_piston_rod_1_point))
Declaration(NamedIndividual(:part_piston_rod_1_pose))
Declaration(NamedIndividual(:part_piston_rod_1_x_axis))
Declaration(NamedIndividual(:part_piston_rod_1_z_axis))
Declaration(NamedIndividual(:part_piston_rod_2))
Declaration(NamedIndividual(:part_piston_rod_2_in_tray_point))
Declaration(NamedIndividual(:part_piston_rod_2_in_tray_pose))
Declaration(NamedIndividual(:part_piston_rod_2_in_tray_x_axis))
Declaration(NamedIndividual(:part_piston_rod_2_in_tray_z_axis))
Declaration(NamedIndividual(:part_piston_rod_2_location))
Declaration(NamedIndividual(:part_piston_rod_2_point))
Declaration(NamedIndividual(:part_piston_rod_2_pose))
Declaration(NamedIndividual(:part_piston_rod_2_x_axis))
Declaration(NamedIndividual(:part_piston_rod_2_z_axis))
Declaration(NamedIndividual(:part_piston_rod_3))
Declaration(NamedIndividual(:part_piston_rod_3_in_tray_point))
Declaration(NamedIndividual(:part_piston_rod_3_in_tray_pose))
Declaration(NamedIndividual(:part_piston_rod_3_in_tray_x_axis))
Declaration(NamedIndividual(:part_piston_rod_3_in_tray_z_axis))
Declaration(NamedIndividual(:part_piston_rod_3_location))
Declaration(NamedIndividual(:part_piston_rod_3_point))
Declaration(NamedIndividual(:part_piston_rod_3_pose))
Declaration(NamedIndividual(:part_piston_rod_3_x_axis))
Declaration(NamedIndividual(:part_piston_rod_3_z_axis))
Declaration(NamedIndividual(:part_piston_rod_4))
Declaration(NamedIndividual(:part_piston_rod_4_in_tray_point))
Declaration(NamedIndividual(:part_piston_rod_4_in_tray_pose))
Declaration(NamedIndividual(:part_piston_rod_4_in_tray_x_axis))
Declaration(NamedIndividual(:part_piston_rod_4_in_tray_z_axis))
Declaration(NamedIndividual(:part_piston_rod_4_location))
Declaration(NamedIndividual(:part_piston_rod_4_point))
Declaration(NamedIndividual(:part_piston_rod_4_pose))
Declaration(NamedIndividual(:part_piston_rod_4_x_axis))
Declaration(NamedIndividual(:part_piston_rod_4_z_axis))
Declaration(NamedIndividual(:piston_rod_part_shape))
Declaration(NamedIndividual(:piston_rod_tray))
Declaration(NamedIndividual(:piston_rod_tray_location))
Declaration(NamedIndividual(:piston_rod_tray_point))
Declaration(NamedIndividual(:piston_rod_tray_pose))
Declaration(NamedIndividual(:piston_rod_tray_shape))
Declaration(NamedIndividual(:piston_rod_tray_slot_1))
Declaration(NamedIndividual(:piston_rod_tray_slot_2))
Declaration(NamedIndividual(:piston_rod_tray_slot_3))
Declaration(NamedIndividual(:piston_rod_tray_slot_4))
Declaration(NamedIndividual(:piston_rod_tray_x_axis))
Declaration(NamedIndividual(:piston_rod_tray_z_axis))
Declaration(NamedIndividual(:prap_gasket_1))
Declaration(NamedIndividual(:prap_gasket_2))
Declaration(NamedIndividual(:prap_gasket_3))
Declaration(NamedIndividual(:prap_gasket_4))
Declaration(NamedIndividual(:prap_gear_1))
Declaration(NamedIndividual(:prap_gear_2))
Declaration(NamedIndividual(:prap_gear_3))
Declaration(NamedIndividual(:prap_gear_4))
Declaration(NamedIndividual(:prap_piston_rod_1))
Declaration(NamedIndividual(:prap_piston_rod_2))
Declaration(NamedIndividual(:prap_piston_rod_3))
Declaration(NamedIndividual(:prap_piston_rod_4))
Declaration(NamedIndividual(:relative_location_in_1))
Declaration(NamedIndividual(:sku_gasket_part))
Declaration(NamedIndividual(:sku_gasket_vessel))
Declaration(NamedIndividual(:sku_gear_part))
Declaration(NamedIndividual(:sku_gear_vessel))
Declaration(NamedIndividual(:sku_kit_vessel))
Declaration(NamedIndividual(:sku_piston_rod_part))
Declaration(NamedIndividual(:sku_piston_rod_vessel))

############################
#   Object Properties
############################

# Object Property: :hadByBase_EndEffectorChangingStation (:hadByBase_EndEffectorChangingStation)

InverseObjectProperties(:hadByBase_EndEffectorChangingStation :hasEndEffectorChangingStation_Base)
ObjectPropertyRange(:hadByBase_EndEffectorChangingStation :EndEffectorChangingStation)

# Object Property: :hadByChangingStation_KittingWorkstation (:hadByChangingStation_KittingWorkstation)

InverseObjectProperties(:hadByChangingStation_KittingWorkstation :hasKittingWorkstation_ChangingStation)
ObjectPropertyDomain(:hadByChangingStation_KittingWorkstation :EndEffectorChangingStation)
ObjectPropertyRange(:hadByChangingStation_KittingWorkstation :KittingWorkstation)

# Object Property: :hadByDesign_PartsTray (:hadByDesign_PartsTray)

InverseObjectProperties(:hadByDesign_PartsTray :hasPartsTray_Design)
ObjectPropertyDomain(:hadByDesign_PartsTray :PartsTrayDesign)
ObjectPropertyRange(:hadByDesign_PartsTray :PartsTray)

# Object Property: :hadByEffectorAndGrasp_NoSkuObject (:hadByEffectorAndGrasp_NoSkuObject)

InverseObjectProperties(:hadByEffectorAndGrasp_NoSkuObject :hasNoSkuObject_EffectorAndGrasp)
ObjectPropertyDomain(:hadByEffectorAndGrasp_NoSkuObject :EndEffectorGrasp)
ObjectPropertyRange(:hadByEffectorAndGrasp_NoSkuObject :NoSkuObject)

# Object Property: :hadByEffectorAndGrasp_StockKeepingUnit (:hadByEffectorAndGrasp_StockKeepingUnit)

InverseObjectProperties(:hadByEffectorAndGrasp_StockKeepingUnit :hasStockKeepingUnit_EffectorAndGrasp)
ObjectPropertyDomain(:hadByEffectorAndGrasp_StockKeepingUnit :EndEffectorGrasp)
ObjectPropertyRange(:hadByEffectorAndGrasp_StockKeepingUnit :StockKeepingUnit)

# Object Property: :hadByEndEffectorHolder_EndEffectorChangingStation (:hadByEndEffectorHolder_EndEffectorChangingStation)

InverseObjectProperties(:hadByEndEffectorHolder_EndEffectorChangingStation :hasEndEffectorChangingStation_EndEffectorHolder)
ObjectPropertyDomain(:hadByEndEffectorHolder_EndEffectorChangingStation :EndEffectorHolder)
ObjectPropertyRange(:hadByEndEffectorHolder_EndEffectorChangingStation :EndEffectorChangingStation)

# Object Property: :hadByEndEffector_EndEffectorHolder (:hadByEndEffector_EndEffectorHolder)

InverseObjectProperties(:hadByEndEffector_EndEffectorHolder :hasEndEffectorHolder_EndEffector)
ObjectPropertyDomain(:hadByEndEffector_EndEffectorHolder :EndEffector)
ObjectPropertyRange(:hadByEndEffector_EndEffectorHolder :EndEffectorHolder)

# Object Property: :hadByEndEffector_Robot (:hadByEndEffector_Robot)

InverseObjectProperties(:hadByEndEffector_Robot :hasRobot_EndEffector)
ObjectPropertyDomain(:hadByEndEffector_Robot :EndEffector)
ObjectPropertyRange(:hadByEndEffector_Robot :Robot)

# Object Property: :hadByExternalShape_NoSkuObject (:hadByExternalShape_NoSkuObject)

InverseObjectProperties(:hadByExternalShape_NoSkuObject :hasNoSkuObject_ExternalShape)
ObjectPropertyDomain(:hadByExternalShape_NoSkuObject :ExternalShape)
ObjectPropertyRange(:hadByExternalShape_NoSkuObject :NoSkuObject)

# Object Property: :hadByExternalShape_StockKeepingUnit (:hadByExternalShape_StockKeepingUnit)

InverseObjectProperties(:hadByExternalShape_StockKeepingUnit :hasStockKeepingUnit_ExternalShape)
ObjectPropertyDomain(:hadByExternalShape_StockKeepingUnit :ExternalShape)
ObjectPropertyRange(:hadByExternalShape_StockKeepingUnit :StockKeepingUnit)

# Object Property: :hadByGraspPose1_ThreeFingerGrasp (:hadByGraspPose1_ThreeFingerGrasp)

InverseObjectProperties(:hadByGraspPose1_ThreeFingerGrasp :hasThreeFingerGrasp_GraspPose1)
ObjectPropertyDomain(:hadByGraspPose1_ThreeFingerGrasp :PoseOnlyLocation)
ObjectPropertyRange(:hadByGraspPose1_ThreeFingerGrasp :ThreeFingerGrasp)

# Object Property: :hadByGraspPose1_TwoJawsGrasp (:hadByGraspPose1_TwoJawsGrasp)

InverseObjectProperties(:hadByGraspPose1_TwoJawsGrasp :hasTwoJawsGrasp_GraspPose1)
ObjectPropertyDomain(:hadByGraspPose1_TwoJawsGrasp :PoseOnlyLocation)
ObjectPropertyRange(:hadByGraspPose1_TwoJawsGrasp :TwoJawsGrasp)

# Object Property: :hadByGraspPose2_ThreeFingerGrasp (:hadByGraspPose2_ThreeFingerGrasp)

InverseObjectProperties(:hadByGraspPose2_ThreeFingerGrasp :hasThreeFingerGrasp_GraspPose2)
ObjectPropertyDomain(:hadByGraspPose2_ThreeFingerGrasp :PoseOnlyLocation)
ObjectPropertyRange(:hadByGraspPose2_ThreeFingerGrasp :ThreeFingerGrasp)

# Object Property: :hadByGraspPose2_TwoJawsGrasp (:hadByGraspPose2_TwoJawsGrasp)

InverseObjectProperties(:hadByGraspPose2_TwoJawsGrasp :hasTwoJawsGrasp_GraspPose2)
ObjectPropertyDomain(:hadByGraspPose2_TwoJawsGrasp :PoseOnlyLocation)
ObjectPropertyRange(:hadByGraspPose2_TwoJawsGrasp :TwoJawsGrasp)

# Object Property: :hadByGraspPose3_ThreeFingerGrasp (:hadByGraspPose3_ThreeFingerGrasp)

InverseObjectProperties(:hadByGraspPose3_ThreeFingerGrasp :hasThreeFingerGrasp_GraspPose3)
ObjectPropertyDomain(:hadByGraspPose3_ThreeFingerGrasp :PoseOnlyLocation)
ObjectPropertyRange(:hadByGraspPose3_ThreeFingerGrasp :ThreeFingerGrasp)

# Object Property: :hadByGraspPose_OtherGripperGrasp (:hadByGraspPose_OtherGripperGrasp)

InverseObjectProperties(:hadByGraspPose_OtherGripperGrasp :hasOtherGripperGrasp_GraspPose)
ObjectPropertyDomain(:hadByGraspPose_OtherGripperGrasp :PoseOnlyLocation)
ObjectPropertyRange(:hadByGraspPose_OtherGripperGrasp :OtherGripperGrasp)

# Object Property: :hadByGraspPose_ParallelGripperGrasp (:hadByGraspPose_ParallelGripperGrasp)

InverseObjectProperties(:hadByGraspPose_ParallelGripperGrasp :hasParallelGripperGrasp_GraspPose)
ObjectPropertyDomain(:hadByGraspPose_ParallelGripperGrasp :PoseOnlyLocation)
ObjectPropertyRange(:hadByGraspPose_ParallelGripperGrasp :ParallelGripperGrasp)

# Object Property: :hadByGraspPose_VacuumEffectorSingleGrasp (:hadByGraspPose_VacuumEffectorSingleGrasp)

InverseObjectProperties(:hadByGraspPose_VacuumEffectorSingleGrasp :hasVacuumEffectorSingleGrasp_GraspPose)
ObjectPropertyDomain(:hadByGraspPose_VacuumEffectorSingleGrasp :PoseOnlyLocation)
ObjectPropertyRange(:hadByGraspPose_VacuumEffectorSingleGrasp :VacuumEffectorSingleGrasp)

# Object Property: :hadByHeldObjectOffset_EndEffector (:hadByHeldObjectOffset_EndEffector)

InverseObjectProperties(:hadByHeldObjectOffset_EndEffector :hasEndEffector_HeldObjectOffset)
ObjectPropertyDomain(:hadByHeldObjectOffset_EndEffector :PhysicalLocation)
ObjectPropertyRange(:hadByHeldObjectOffset_EndEffector :EndEffector)

# Object Property: :hadByHeldObject_EndEffector (:hadByHeldObject_EndEffector)

InverseObjectProperties(:hadByHeldObject_EndEffector :hasEndEffector_HeldObject)
ObjectPropertyDomain(:hadByHeldObject_EndEffector :SolidObject)
ObjectPropertyRange(:hadByHeldObject_EndEffector :EndEffector)

# Object Property: :hadByInternalShape_NoSkuObject (:hadByInternalShape_NoSkuObject)

InverseObjectProperties(:hadByInternalShape_NoSkuObject :hasNoSkuObject_InternalShape)
ObjectPropertyDomain(:hadByInternalShape_NoSkuObject :InternalShape)
ObjectPropertyRange(:hadByInternalShape_NoSkuObject :NoSkuObject)

# Object Property: :hadByInternalShape_StockKeepingUnit (:hadByInternalShape_StockKeepingUnit)

InverseObjectProperties(:hadByInternalShape_StockKeepingUnit :hasStockKeepingUnit_InternalShape)
ObjectPropertyDomain(:hadByInternalShape_StockKeepingUnit :InternalShape)
ObjectPropertyRange(:hadByInternalShape_StockKeepingUnit :StockKeepingUnit)

# Object Property: :hadByLargeContainer_LargeBoxWithEmptyVessels (:hadByLargeContainer_LargeBoxWithEmptyVessels)

InverseObjectProperties(:hadByLargeContainer_LargeBoxWithEmptyVessels :hasLargeBoxWithEmptyVessels_LargeContainer)
ObjectPropertyDomain(:hadByLargeContainer_LargeBoxWithEmptyVessels :LargeContainer)
ObjectPropertyRange(:hadByLargeContainer_LargeBoxWithEmptyVessels :LargeBoxWithEmptyVessels)

# Object Property: :hadByLargeContainer_LargeBoxWithPartsTrays (:hadByLargeContainer_LargeBoxWithPartsTrays)

InverseObjectProperties(:hadByLargeContainer_LargeBoxWithPartsTrays :hasLargeBoxWithPartsTrays_LargeContainer)
ObjectPropertyDomain(:hadByLargeContainer_LargeBoxWithPartsTrays :LargeContainer)
ObjectPropertyRange(:hadByLargeContainer_LargeBoxWithPartsTrays :LargeBoxWithPartsTrays)

# Object Property: :hadByMarkingLayout_Marking (:hadByMarkingLayout_Marking)

InverseObjectProperties(:hadByMarkingLayout_Marking :hasMarking_MarkingLayout)
ObjectPropertyDomain(:hadByMarkingLayout_Marking :MarkingLayout)
ObjectPropertyRange(:hadByMarkingLayout_Marking :Marking)

# Object Property: :hadByMarkingModel_Marking (:hadByMarkingModel_Marking)

InverseObjectProperties(:hadByMarkingModel_Marking :hasMarking_MarkingModel)
ObjectPropertyDomain(:hadByMarkingModel_Marking :MarkingModel)
ObjectPropertyRange(:hadByMarkingModel_Marking :Marking)

# Object Property: :hadByMarking_ShapeDesign (:hadByMarking_ShapeDesign)

InverseObjectProperties(:hadByMarking_ShapeDesign :hasShapeDesign_Marking)
ObjectPropertyDomain(:hadByMarking_ShapeDesign :Marking)
ObjectPropertyRange(:hadByMarking_ShapeDesign :ShapeDesign)

# Object Property: :hadByMaximumPoint_BoxVolume (:hadByMaximumPoint_BoxVolume)

InverseObjectProperties(:hadByMaximumPoint_BoxVolume :hasBoxVolume_MaximumPoint)
ObjectPropertyDomain(:hadByMaximumPoint_BoxVolume :Point)
ObjectPropertyRange(:hadByMaximumPoint_BoxVolume :BoxVolume)

# Object Property: :hadByMinimumPoint_BoxVolume (:hadByMinimumPoint_BoxVolume)

InverseObjectProperties(:hadByMinimumPoint_BoxVolume :hasBoxVolume_MinimumPoint)
ObjectPropertyDomain(:hadByMinimumPoint_BoxVolume :Point)
ObjectPropertyRange(:hadByMinimumPoint_BoxVolume :BoxVolume)

# Object Property: :hadByObjectOnTable_WorkTable (:hadByObjectOnTable_WorkTable)

InverseObjectProperties(:hadByObjectOnTable_WorkTable :hasWorkTable_ObjectOnTable)
ObjectPropertyDomain(:hadByObjectOnTable_WorkTable :SolidObject)
ObjectPropertyRange(:hadByObjectOnTable_WorkTable :WorkTable)

# Object Property: :hadByObject_KittingWorkstation (:hadByObject_KittingWorkstation)

InverseObjectProperties(:hadByObject_KittingWorkstation :hasKittingWorkstation_Object)
ObjectPropertyDomain(:hadByObject_KittingWorkstation :SolidObject)
ObjectPropertyRange(:hadByObject_KittingWorkstation :KittingWorkstation)

# Object Property: :hadByOtherGripper_OtherGripperGrasp (:hadByOtherGripper_OtherGripperGrasp)

InverseObjectProperties(:hadByOtherGripper_OtherGripperGrasp :hasOtherGripperGrasp_OtherGripper)
ObjectPropertyDomain(:hadByOtherGripper_OtherGripperGrasp :GripperOther)
ObjectPropertyRange(:hadByOtherGripper_OtherGripperGrasp :OtherGripperGrasp)

# Object Property: :hadByOtherObstacle_KittingWorkstation (:hadByOtherObstacle_KittingWorkstation)

InverseObjectProperties(:hadByOtherObstacle_KittingWorkstation :hasKittingWorkstation_OtherObstacle)
ObjectPropertyDomain(:hadByOtherObstacle_KittingWorkstation :BoxVolume)
ObjectPropertyRange(:hadByOtherObstacle_KittingWorkstation :KittingWorkstation)

# Object Property: :hadByParallelGripper_ParallelGripperGrasp (:hadByParallelGripper_ParallelGripperGrasp)

InverseObjectProperties(:hadByParallelGripper_ParallelGripperGrasp :hasParallelGripperGrasp_ParallelGripper)
ObjectPropertyDomain(:hadByParallelGripper_ParallelGripperGrasp :GripperParallel)
ObjectPropertyRange(:hadByParallelGripper_ParallelGripperGrasp :ParallelGripperGrasp)

# Object Property: :hadByPartRefAndPose_PartsTrayDesign (:hadByPartRefAndPose_PartsTrayDesign)

InverseObjectProperties(:hadByPartRefAndPose_PartsTrayDesign :hasPartsTrayDesign_PartRefAndPose)
ObjectPropertyDomain(:hadByPartRefAndPose_PartsTrayDesign :PartRefAndPose)
ObjectPropertyRange(:hadByPartRefAndPose_PartsTrayDesign :PartsTrayDesign)

# Object Property: :hadByPartRefAndPose_Slot (:hadByPartRefAndPose_Slot)

InverseObjectProperties(:hadByPartRefAndPose_Slot :hasSlot_PartRefAndPose)
ObjectPropertyDomain(:hadByPartRefAndPose_Slot :PartRefAndPose)
ObjectPropertyRange(:hadByPartRefAndPose_Slot :Slot)

# Object Property: :hadByPartSku_PartsBin (:hadByPartSku_PartsBin)

InverseObjectProperties(:hadByPartSku_PartsBin :hasPartsBin_PartSku)
ObjectPropertyDomain(:hadByPartSku_PartsBin :StockKeepingUnit)
ObjectPropertyRange(:hadByPartSku_PartsBin :PartsBin)

# Object Property: :hadByPart_PartsVessel (:hadByPart_PartsVessel)

InverseObjectProperties(:hadByPart_PartsVessel :hasPartsVessel_Part)
ObjectPropertyDomain(:hadByPart_PartsVessel :Part)
ObjectPropertyRange(:hadByPart_PartsVessel :PartsVessel)

# Object Property: :hadByPart_Slot (:hadByPart_Slot)

InverseObjectProperties(:hadByPart_Slot :hasSlot_Part)
ObjectPropertyDomain(:hadByPart_Slot :Part)
ObjectPropertyRange(:hadByPart_Slot :Slot)

# Object Property: :hadByPartsTrayDesign_KittingWorkstation (:hadByPartsTrayDesign_KittingWorkstation)

InverseObjectProperties(:hadByPartsTrayDesign_KittingWorkstation :hasKittingWorkstation_PartsTrayDesign)
ObjectPropertyDomain(:hadByPartsTrayDesign_KittingWorkstation :PartsTrayDesign)
ObjectPropertyRange(:hadByPartsTrayDesign_KittingWorkstation :KittingWorkstation)

# Object Property: :hadByPartsTrayDesign_LargeBoxWithPartsTrays (:hadByPartsTrayDesign_LargeBoxWithPartsTrays)

InverseObjectProperties(:hadByPartsTrayDesign_LargeBoxWithPartsTrays :hasLargeBoxWithPartsTrays_PartsTrayDesign)
ObjectPropertyDomain(:hadByPartsTrayDesign_LargeBoxWithPartsTrays :PartsTrayDesign)
ObjectPropertyRange(:hadByPartsTrayDesign_LargeBoxWithPartsTrays :LargeBoxWithPartsTrays)

# Object Property: :hadByPartsTray_LargeBoxWithPartsTrays (:hadByPartsTray_LargeBoxWithPartsTrays)

InverseObjectProperties(:hadByPartsTray_LargeBoxWithPartsTrays :hasLargeBoxWithPartsTrays_PartsTray)
ObjectPropertyDomain(:hadByPartsTray_LargeBoxWithPartsTrays :PartsTray)
ObjectPropertyRange(:hadByPartsTray_LargeBoxWithPartsTrays :LargeBoxWithPartsTrays)

# Object Property: :hadByPoint_MarkingLayout (:hadByPoint_MarkingLayout)

InverseObjectProperties(:hadByPoint_MarkingLayout :hasMarkingLayout_Point)
ObjectPropertyDomain(:hadByPoint_MarkingLayout :Point)
ObjectPropertyRange(:hadByPoint_MarkingLayout :MarkingLayout)

# Object Property: :hadByPoint_Pose (:hadByPoint_Pose)

InverseObjectProperties(:hadByPoint_Pose :hasPose_Point)
ObjectPropertyDomain(:hadByPoint_Pose :Point)
ObjectPropertyRange(:hadByPoint_Pose :Pose)

# Object Property: :hadByPose_PartRefAndPose (:hadByPose_PartRefAndPose)

InverseObjectProperties(:hadByPose_PartRefAndPose :hasPartRefAndPose_Pose)
ObjectPropertyDomain(:hadByPose_PartRefAndPose :Pose)
ObjectPropertyRange(:hadByPose_PartRefAndPose :PartRefAndPose)

# Object Property: :hadByPose_PoseLocation (:hadByPose_PoseLocation)

InverseObjectProperties(:hadByPose_PoseLocation :hasPoseLocation_Pose)
ObjectPropertyDomain(:hadByPose_PoseLocation :Pose)
ObjectPropertyRange(:hadByPose_PoseLocation :PoseLocation)

# Object Property: :hadByPrimaryLocation_SolidObject (:hadByPrimaryLocation_SolidObject)

InverseObjectProperties(:hadByPrimaryLocation_SolidObject :hasSolidObject_PrimaryLocation)
ObjectPropertyDomain(:hadByPrimaryLocation_SolidObject :PhysicalLocation)
ObjectPropertyRange(:hadByPrimaryLocation_SolidObject :SolidObject)

# Object Property: :hadByRefObject_PhysicalLocation (:hadByRefObject_PhysicalLocation)

InverseObjectProperties(:hadByRefObject_PhysicalLocation :hasPhysicalLocation_RefObject)
ObjectPropertyDomain(:hadByRefObject_PhysicalLocation :SolidObject)
ObjectPropertyRange(:hadByRefObject_PhysicalLocation :PhysicalLocation)

# Object Property: :hadByRobot_KittingWorkstation (:hadByRobot_KittingWorkstation)

InverseObjectProperties(:hadByRobot_KittingWorkstation :hasKittingWorkstation_Robot)
ObjectPropertyDomain(:hadByRobot_KittingWorkstation :Robot)
ObjectPropertyRange(:hadByRobot_KittingWorkstation :KittingWorkstation)

# Object Property: :hadBySecondaryLocation_SolidObject (:hadBySecondaryLocation_SolidObject)

InverseObjectProperties(:hadBySecondaryLocation_SolidObject :hasSolidObject_SecondaryLocation)
ObjectPropertyDomain(:hadBySecondaryLocation_SolidObject :PhysicalLocation)
ObjectPropertyRange(:hadBySecondaryLocation_SolidObject :SolidObject)

# Object Property: :hadBySku_KittingWorkstation (:hadBySku_KittingWorkstation)

InverseObjectProperties(:hadBySku_KittingWorkstation :hasKittingWorkstation_Sku)
ObjectPropertyDomain(:hadBySku_KittingWorkstation :StockKeepingUnit)
ObjectPropertyRange(:hadBySku_KittingWorkstation :KittingWorkstation)

# Object Property: :hadBySku_PartRefAndPose (:hadBySku_PartRefAndPose)

InverseObjectProperties(:hadBySku_PartRefAndPose :hasPartRefAndPose_Sku)
ObjectPropertyDomain(:hadBySku_PartRefAndPose :StockKeepingUnit)
ObjectPropertyRange(:hadBySku_PartRefAndPose :PartRefAndPose)

# Object Property: :hadBySku_SkuObject (:hadBySku_SkuObject)

InverseObjectProperties(:hadBySku_SkuObject :hasSkuObject_Sku)
ObjectPropertyDomain(:hadBySku_SkuObject :StockKeepingUnit)
ObjectPropertyRange(:hadBySku_SkuObject :SkuObject)

# Object Property: :hadBySlot_PartsTray (:hadBySlot_PartsTray)

InverseObjectProperties(:hadBySlot_PartsTray :hasPartsTray_Slot)
ObjectPropertyDomain(:hadBySlot_PartsTray :Slot)
ObjectPropertyRange(:hadBySlot_PartsTray :PartsTray)

# Object Property: :hadByThreeFingerGripper_ThreeFingerGrasp (:hadByThreeFingerGripper_ThreeFingerGrasp)

InverseObjectProperties(:hadByThreeFingerGripper_ThreeFingerGrasp :hasThreeFingerGrasp_ThreeFingerGripper)
ObjectPropertyDomain(:hadByThreeFingerGripper_ThreeFingerGrasp :GripperThreeFinger)
ObjectPropertyRange(:hadByThreeFingerGripper_ThreeFingerGrasp :ThreeFingerGrasp)

# Object Property: :hadByTolerance_PoseOnlyLocation (:hadByTolerance_PoseOnlyLocation)

InverseObjectProperties(:hadByTolerance_PoseOnlyLocation :hasPoseOnlyLocation_Tolerance)
ObjectPropertyDomain(:hadByTolerance_PoseOnlyLocation :PoseTolerance)
ObjectPropertyRange(:hadByTolerance_PoseOnlyLocation :PoseOnlyLocation)

# Object Property: :hadByTwoJawsGripper_TwoJawsGrasp (:hadByTwoJawsGripper_TwoJawsGrasp)

InverseObjectProperties(:hadByTwoJawsGripper_TwoJawsGrasp :hasTwoJawsGrasp_TwoJawsGripper)
ObjectPropertyDomain(:hadByTwoJawsGripper_TwoJawsGrasp :GripperTwoJaws)
ObjectPropertyRange(:hadByTwoJawsGripper_TwoJawsGrasp :TwoJawsGrasp)

# Object Property: :hadByVacuumEffectorSingle_VacuumEffectorSingleGrasp (:hadByVacuumEffectorSingle_VacuumEffectorSingleGrasp)

InverseObjectProperties(:hadByVacuumEffectorSingle_VacuumEffectorSingleGrasp :hasVacuumEffectorSingleGrasp_VacuumEffectorSingle)
ObjectPropertyDomain(:hadByVacuumEffectorSingle_VacuumEffectorSingleGrasp :VacuumEffectorSingleCup)
ObjectPropertyRange(:hadByVacuumEffectorSingle_VacuumEffectorSingleGrasp :VacuumEffectorSingleGrasp)

# Object Property: :hadByVesselSku_PartsTrayDesign (:hadByVesselSku_PartsTrayDesign)

InverseObjectProperties(:hadByVesselSku_PartsTrayDesign :hasPartsTrayDesign_VesselSku)
ObjectPropertyDomain(:hadByVesselSku_PartsTrayDesign :StockKeepingUnit)
ObjectPropertyRange(:hadByVesselSku_PartsTrayDesign :PartsTrayDesign)

# Object Property: :hadByVessel_LargeBoxWithEmptyVessels (:hadByVessel_LargeBoxWithEmptyVessels)

InverseObjectProperties(:hadByVessel_LargeBoxWithEmptyVessels :hasLargeBoxWithEmptyVessels_Vessel)
ObjectPropertyDomain(:hadByVessel_LargeBoxWithEmptyVessels :PartsVessel)
ObjectPropertyRange(:hadByVessel_LargeBoxWithEmptyVessels :LargeBoxWithEmptyVessels)

# Object Property: :hadByWorkVolume_Robot (:hadByWorkVolume_Robot)

InverseObjectProperties(:hadByWorkVolume_Robot :hasRobot_WorkVolume)
ObjectPropertyDomain(:hadByWorkVolume_Robot :BoxVolume)
ObjectPropertyRange(:hadByWorkVolume_Robot :Robot)

# Object Property: :hadByXAxis_MarkingLayout (:hadByXAxis_MarkingLayout)

InverseObjectProperties(:hadByXAxis_MarkingLayout :hasMarkingLayout_XAxis)
ObjectPropertyDomain(:hadByXAxis_MarkingLayout :Vector)
ObjectPropertyRange(:hadByXAxis_MarkingLayout :MarkingLayout)

# Object Property: :hadByXAxis_Pose (:hadByXAxis_Pose)

InverseObjectProperties(:hadByXAxis_Pose :hasPose_XAxis)
ObjectPropertyDomain(:hadByXAxis_Pose :Vector)
ObjectPropertyRange(:hadByXAxis_Pose :Pose)

# Object Property: :hadByYAxis_MarkingLayout (:hadByYAxis_MarkingLayout)

InverseObjectProperties(:hadByYAxis_MarkingLayout :hasMarkingLayout_YAxis)
ObjectPropertyDomain(:hadByYAxis_MarkingLayout :Vector)
ObjectPropertyRange(:hadByYAxis_MarkingLayout :MarkingLayout)

# Object Property: :hadByZAxis_Pose (:hadByZAxis_Pose)

InverseObjectProperties(:hadByZAxis_Pose :hasPose_ZAxis)
ObjectPropertyDomain(:hadByZAxis_Pose :Vector)
ObjectPropertyRange(:hadByZAxis_Pose :Pose)

# Object Property: :hasBoxVolume_MaximumPoint (:hasBoxVolume_MaximumPoint)

FunctionalObjectProperty(:hasBoxVolume_MaximumPoint)
InverseFunctionalObjectProperty(:hasBoxVolume_MaximumPoint)
ObjectPropertyDomain(:hasBoxVolume_MaximumPoint :BoxVolume)
ObjectPropertyRange(:hasBoxVolume_MaximumPoint :Point)

# Object Property: :hasBoxVolume_MinimumPoint (:hasBoxVolume_MinimumPoint)

FunctionalObjectProperty(:hasBoxVolume_MinimumPoint)
InverseFunctionalObjectProperty(:hasBoxVolume_MinimumPoint)
ObjectPropertyDomain(:hasBoxVolume_MinimumPoint :BoxVolume)
ObjectPropertyRange(:hasBoxVolume_MinimumPoint :Point)

# Object Property: :hasEndEffectorChangingStation_Base (:hasEndEffectorChangingStation_Base)

FunctionalObjectProperty(:hasEndEffectorChangingStation_Base)
InverseFunctionalObjectProperty(:hasEndEffectorChangingStation_Base)
ObjectPropertyDomain(:hasEndEffectorChangingStation_Base :EndEffectorChangingStation)

# Object Property: :hasEndEffectorChangingStation_EndEffectorHolder (:hasEndEffectorChangingStation_EndEffectorHolder)

InverseFunctionalObjectProperty(:hasEndEffectorChangingStation_EndEffectorHolder)
ObjectPropertyDomain(:hasEndEffectorChangingStation_EndEffectorHolder :EndEffectorChangingStation)
ObjectPropertyRange(:hasEndEffectorChangingStation_EndEffectorHolder :EndEffectorHolder)

# Object Property: :hasEndEffectorHolder_EndEffector (:hasEndEffectorHolder_EndEffector)

FunctionalObjectProperty(:hasEndEffectorHolder_EndEffector)
InverseFunctionalObjectProperty(:hasEndEffectorHolder_EndEffector)
ObjectPropertyDomain(:hasEndEffectorHolder_EndEffector :EndEffectorHolder)
ObjectPropertyRange(:hasEndEffectorHolder_EndEffector :EndEffector)

# Object Property: :hasEndEffector_HeldObject (:hasEndEffector_HeldObject)

FunctionalObjectProperty(:hasEndEffector_HeldObject)
InverseFunctionalObjectProperty(:hasEndEffector_HeldObject)
ObjectPropertyDomain(:hasEndEffector_HeldObject :EndEffector)
ObjectPropertyRange(:hasEndEffector_HeldObject :SolidObject)

# Object Property: :hasEndEffector_HeldObjectOffset (:hasEndEffector_HeldObjectOffset)

FunctionalObjectProperty(:hasEndEffector_HeldObjectOffset)
InverseFunctionalObjectProperty(:hasEndEffector_HeldObjectOffset)
ObjectPropertyDomain(:hasEndEffector_HeldObjectOffset :EndEffector)
ObjectPropertyRange(:hasEndEffector_HeldObjectOffset :PhysicalLocation)

# Object Property: :hasKittingWorkstation_ChangingStation (:hasKittingWorkstation_ChangingStation)

FunctionalObjectProperty(:hasKittingWorkstation_ChangingStation)
InverseFunctionalObjectProperty(:hasKittingWorkstation_ChangingStation)
ObjectPropertyDomain(:hasKittingWorkstation_ChangingStation :KittingWorkstation)
ObjectPropertyRange(:hasKittingWorkstation_ChangingStation :EndEffectorChangingStation)

# Object Property: :hasKittingWorkstation_Object (:hasKittingWorkstation_Object)

InverseFunctionalObjectProperty(:hasKittingWorkstation_Object)
ObjectPropertyDomain(:hasKittingWorkstation_Object :KittingWorkstation)
ObjectPropertyRange(:hasKittingWorkstation_Object :SolidObject)

# Object Property: :hasKittingWorkstation_OtherObstacle (:hasKittingWorkstation_OtherObstacle)

InverseFunctionalObjectProperty(:hasKittingWorkstation_OtherObstacle)
ObjectPropertyDomain(:hasKittingWorkstation_OtherObstacle :KittingWorkstation)
ObjectPropertyRange(:hasKittingWorkstation_OtherObstacle :BoxVolume)

# Object Property: :hasKittingWorkstation_PartsTrayDesign (:hasKittingWorkstation_PartsTrayDesign)

InverseFunctionalObjectProperty(:hasKittingWorkstation_PartsTrayDesign)
ObjectPropertyDomain(:hasKittingWorkstation_PartsTrayDesign :KittingWorkstation)
ObjectPropertyRange(:hasKittingWorkstation_PartsTrayDesign :PartsTrayDesign)

# Object Property: :hasKittingWorkstation_Robot (:hasKittingWorkstation_Robot)

InverseFunctionalObjectProperty(:hasKittingWorkstation_Robot)
ObjectPropertyDomain(:hasKittingWorkstation_Robot :KittingWorkstation)
ObjectPropertyRange(:hasKittingWorkstation_Robot :Robot)

# Object Property: :hasKittingWorkstation_Sku (:hasKittingWorkstation_Sku)

InverseFunctionalObjectProperty(:hasKittingWorkstation_Sku)
ObjectPropertyDomain(:hasKittingWorkstation_Sku :KittingWorkstation)
ObjectPropertyRange(:hasKittingWorkstation_Sku :StockKeepingUnit)

# Object Property: :hasLargeBoxWithEmptyVessels_LargeContainer (:hasLargeBoxWithEmptyVessels_LargeContainer)

FunctionalObjectProperty(:hasLargeBoxWithEmptyVessels_LargeContainer)
InverseFunctionalObjectProperty(:hasLargeBoxWithEmptyVessels_LargeContainer)
ObjectPropertyDomain(:hasLargeBoxWithEmptyVessels_LargeContainer :LargeBoxWithEmptyVessels)
ObjectPropertyRange(:hasLargeBoxWithEmptyVessels_LargeContainer :LargeContainer)

# Object Property: :hasLargeBoxWithEmptyVessels_Vessel (:hasLargeBoxWithEmptyVessels_Vessel)

InverseFunctionalObjectProperty(:hasLargeBoxWithEmptyVessels_Vessel)
ObjectPropertyDomain(:hasLargeBoxWithEmptyVessels_Vessel :LargeBoxWithEmptyVessels)
ObjectPropertyRange(:hasLargeBoxWithEmptyVessels_Vessel :PartsVessel)

# Object Property: :hasLargeBoxWithPartsTrays_LargeContainer (:hasLargeBoxWithPartsTrays_LargeContainer)

FunctionalObjectProperty(:hasLargeBoxWithPartsTrays_LargeContainer)
InverseFunctionalObjectProperty(:hasLargeBoxWithPartsTrays_LargeContainer)
ObjectPropertyDomain(:hasLargeBoxWithPartsTrays_LargeContainer :LargeBoxWithPartsTrays)
ObjectPropertyRange(:hasLargeBoxWithPartsTrays_LargeContainer :LargeContainer)

# Object Property: :hasLargeBoxWithPartsTrays_PartsTray (:hasLargeBoxWithPartsTrays_PartsTray)

InverseFunctionalObjectProperty(:hasLargeBoxWithPartsTrays_PartsTray)
ObjectPropertyDomain(:hasLargeBoxWithPartsTrays_PartsTray :LargeBoxWithPartsTrays)
ObjectPropertyRange(:hasLargeBoxWithPartsTrays_PartsTray :PartsTray)

# Object Property: :hasLargeBoxWithPartsTrays_PartsTrayDesign (:hasLargeBoxWithPartsTrays_PartsTrayDesign)

FunctionalObjectProperty(:hasLargeBoxWithPartsTrays_PartsTrayDesign)
ObjectPropertyDomain(:hasLargeBoxWithPartsTrays_PartsTrayDesign :LargeBoxWithPartsTrays)
ObjectPropertyRange(:hasLargeBoxWithPartsTrays_PartsTrayDesign :PartsTrayDesign)

# Object Property: :hasMarkingLayout_Point (:hasMarkingLayout_Point)

FunctionalObjectProperty(:hasMarkingLayout_Point)
InverseFunctionalObjectProperty(:hasMarkingLayout_Point)
ObjectPropertyDomain(:hasMarkingLayout_Point :MarkingLayout)
ObjectPropertyRange(:hasMarkingLayout_Point :Point)

# Object Property: :hasMarkingLayout_XAxis (:hasMarkingLayout_XAxis)

FunctionalObjectProperty(:hasMarkingLayout_XAxis)
InverseFunctionalObjectProperty(:hasMarkingLayout_XAxis)
ObjectPropertyDomain(:hasMarkingLayout_XAxis :MarkingLayout)
ObjectPropertyRange(:hasMarkingLayout_XAxis :Vector)

# Object Property: :hasMarkingLayout_YAxis (:hasMarkingLayout_YAxis)

FunctionalObjectProperty(:hasMarkingLayout_YAxis)
InverseFunctionalObjectProperty(:hasMarkingLayout_YAxis)
ObjectPropertyDomain(:hasMarkingLayout_YAxis :MarkingLayout)
ObjectPropertyRange(:hasMarkingLayout_YAxis :Vector)

# Object Property: :hasMarking_MarkingLayout (:hasMarking_MarkingLayout)

FunctionalObjectProperty(:hasMarking_MarkingLayout)
InverseFunctionalObjectProperty(:hasMarking_MarkingLayout)
ObjectPropertyDomain(:hasMarking_MarkingLayout :Marking)
ObjectPropertyRange(:hasMarking_MarkingLayout :MarkingLayout)

# Object Property: :hasMarking_MarkingModel (:hasMarking_MarkingModel)

FunctionalObjectProperty(:hasMarking_MarkingModel)
InverseFunctionalObjectProperty(:hasMarking_MarkingModel)
ObjectPropertyDomain(:hasMarking_MarkingModel :Marking)
ObjectPropertyRange(:hasMarking_MarkingModel :MarkingModel)

# Object Property: :hasNoSkuObject_EffectorAndGrasp (:hasNoSkuObject_EffectorAndGrasp)

InverseFunctionalObjectProperty(:hasNoSkuObject_EffectorAndGrasp)
ObjectPropertyDomain(:hasNoSkuObject_EffectorAndGrasp :NoSkuObject)
ObjectPropertyRange(:hasNoSkuObject_EffectorAndGrasp :EndEffectorGrasp)

# Object Property: :hasNoSkuObject_ExternalShape (:hasNoSkuObject_ExternalShape)

FunctionalObjectProperty(:hasNoSkuObject_ExternalShape)
InverseFunctionalObjectProperty(:hasNoSkuObject_ExternalShape)
ObjectPropertyDomain(:hasNoSkuObject_ExternalShape :NoSkuObject)
ObjectPropertyRange(:hasNoSkuObject_ExternalShape :ExternalShape)

# Object Property: :hasNoSkuObject_InternalShape (:hasNoSkuObject_InternalShape)

FunctionalObjectProperty(:hasNoSkuObject_InternalShape)
InverseFunctionalObjectProperty(:hasNoSkuObject_InternalShape)
ObjectPropertyDomain(:hasNoSkuObject_InternalShape :NoSkuObject)
ObjectPropertyRange(:hasNoSkuObject_InternalShape :InternalShape)

# Object Property: :hasOtherGripperGrasp_GraspPose (:hasOtherGripperGrasp_GraspPose)

InverseFunctionalObjectProperty(:hasOtherGripperGrasp_GraspPose)
ObjectPropertyDomain(:hasOtherGripperGrasp_GraspPose :OtherGripperGrasp)
ObjectPropertyRange(:hasOtherGripperGrasp_GraspPose :PoseOnlyLocation)

# Object Property: :hasOtherGripperGrasp_OtherGripper (:hasOtherGripperGrasp_OtherGripper)

FunctionalObjectProperty(:hasOtherGripperGrasp_OtherGripper)
ObjectPropertyDomain(:hasOtherGripperGrasp_OtherGripper :OtherGripperGrasp)
ObjectPropertyRange(:hasOtherGripperGrasp_OtherGripper :GripperOther)

# Object Property: :hasParallelGripperGrasp_GraspPose (:hasParallelGripperGrasp_GraspPose)

FunctionalObjectProperty(:hasParallelGripperGrasp_GraspPose)
InverseFunctionalObjectProperty(:hasParallelGripperGrasp_GraspPose)
ObjectPropertyDomain(:hasParallelGripperGrasp_GraspPose :ParallelGripperGrasp)
ObjectPropertyRange(:hasParallelGripperGrasp_GraspPose :PoseOnlyLocation)

# Object Property: :hasParallelGripperGrasp_ParallelGripper (:hasParallelGripperGrasp_ParallelGripper)

FunctionalObjectProperty(:hasParallelGripperGrasp_ParallelGripper)
ObjectPropertyDomain(:hasParallelGripperGrasp_ParallelGripper :ParallelGripperGrasp)
ObjectPropertyRange(:hasParallelGripperGrasp_ParallelGripper :GripperParallel)

# Object Property: :hasPartRefAndPose_Pose (:hasPartRefAndPose_Pose)

FunctionalObjectProperty(:hasPartRefAndPose_Pose)
InverseFunctionalObjectProperty(:hasPartRefAndPose_Pose)
ObjectPropertyDomain(:hasPartRefAndPose_Pose :PartRefAndPose)
ObjectPropertyRange(:hasPartRefAndPose_Pose :Pose)

# Object Property: :hasPartRefAndPose_Sku (:hasPartRefAndPose_Sku)

FunctionalObjectProperty(:hasPartRefAndPose_Sku)
ObjectPropertyDomain(:hasPartRefAndPose_Sku :PartRefAndPose)
ObjectPropertyRange(:hasPartRefAndPose_Sku :StockKeepingUnit)

# Object Property: :hasPartsBin_PartSku (:hasPartsBin_PartSku)

FunctionalObjectProperty(:hasPartsBin_PartSku)
ObjectPropertyDomain(:hasPartsBin_PartSku :PartsBin)
ObjectPropertyRange(:hasPartsBin_PartSku :StockKeepingUnit)

# Object Property: :hasPartsTrayDesign_PartRefAndPose (:hasPartsTrayDesign_PartRefAndPose)

InverseFunctionalObjectProperty(:hasPartsTrayDesign_PartRefAndPose)
ObjectPropertyDomain(:hasPartsTrayDesign_PartRefAndPose :PartsTrayDesign)
ObjectPropertyRange(:hasPartsTrayDesign_PartRefAndPose :PartRefAndPose)

# Object Property: :hasPartsTrayDesign_VesselSku (:hasPartsTrayDesign_VesselSku)

FunctionalObjectProperty(:hasPartsTrayDesign_VesselSku)
ObjectPropertyDomain(:hasPartsTrayDesign_VesselSku :PartsTrayDesign)
ObjectPropertyRange(:hasPartsTrayDesign_VesselSku :StockKeepingUnit)

# Object Property: :hasPartsTray_Design (:hasPartsTray_Design)

FunctionalObjectProperty(:hasPartsTray_Design)
ObjectPropertyDomain(:hasPartsTray_Design :PartsTray)
ObjectPropertyRange(:hasPartsTray_Design :PartsTrayDesign)

# Object Property: :hasPartsTray_Slot (:hasPartsTray_Slot)

InverseFunctionalObjectProperty(:hasPartsTray_Slot)
ObjectPropertyDomain(:hasPartsTray_Slot :PartsTray)
ObjectPropertyRange(:hasPartsTray_Slot :Slot)

# Object Property: :hasPartsVessel_Part (:hasPartsVessel_Part)

InverseFunctionalObjectProperty(:hasPartsVessel_Part)
ObjectPropertyDomain(:hasPartsVessel_Part :PartsVessel)
ObjectPropertyRange(:hasPartsVessel_Part :Part)

# Object Property: :hasPhysicalLocation_RefObject (:hasPhysicalLocation_RefObject)

FunctionalObjectProperty(:hasPhysicalLocation_RefObject)
ObjectPropertyDomain(:hasPhysicalLocation_RefObject :PhysicalLocation)
ObjectPropertyRange(:hasPhysicalLocation_RefObject :SolidObject)

# Object Property: :hasPoseLocation_Pose (:hasPoseLocation_Pose)

FunctionalObjectProperty(:hasPoseLocation_Pose)
InverseFunctionalObjectProperty(:hasPoseLocation_Pose)
ObjectPropertyDomain(:hasPoseLocation_Pose :PoseLocation)
ObjectPropertyRange(:hasPoseLocation_Pose :Pose)

# Object Property: :hasPoseOnlyLocation_Tolerance (:hasPoseOnlyLocation_Tolerance)

FunctionalObjectProperty(:hasPoseOnlyLocation_Tolerance)
InverseFunctionalObjectProperty(:hasPoseOnlyLocation_Tolerance)
ObjectPropertyDomain(:hasPoseOnlyLocation_Tolerance :PoseOnlyLocation)
ObjectPropertyRange(:hasPoseOnlyLocation_Tolerance :PoseTolerance)

# Object Property: :hasPose_Point (:hasPose_Point)

FunctionalObjectProperty(:hasPose_Point)
InverseFunctionalObjectProperty(:hasPose_Point)
ObjectPropertyDomain(:hasPose_Point :Pose)
ObjectPropertyRange(:hasPose_Point :Point)

# Object Property: :hasPose_XAxis (:hasPose_XAxis)

FunctionalObjectProperty(:hasPose_XAxis)
InverseFunctionalObjectProperty(:hasPose_XAxis)
ObjectPropertyDomain(:hasPose_XAxis :Pose)
ObjectPropertyRange(:hasPose_XAxis :Vector)

# Object Property: :hasPose_ZAxis (:hasPose_ZAxis)

FunctionalObjectProperty(:hasPose_ZAxis)
InverseFunctionalObjectProperty(:hasPose_ZAxis)
ObjectPropertyDomain(:hasPose_ZAxis :Pose)
ObjectPropertyRange(:hasPose_ZAxis :Vector)

# Object Property: :hasRobot_EndEffector (:hasRobot_EndEffector)

FunctionalObjectProperty(:hasRobot_EndEffector)
InverseFunctionalObjectProperty(:hasRobot_EndEffector)
ObjectPropertyDomain(:hasRobot_EndEffector :Robot)
ObjectPropertyRange(:hasRobot_EndEffector :EndEffector)

# Object Property: :hasRobot_WorkVolume (:hasRobot_WorkVolume)

InverseFunctionalObjectProperty(:hasRobot_WorkVolume)
ObjectPropertyDomain(:hasRobot_WorkVolume :Robot)
ObjectPropertyRange(:hasRobot_WorkVolume :BoxVolume)

# Object Property: :hasShapeDesign_Marking (:hasShapeDesign_Marking)

InverseFunctionalObjectProperty(:hasShapeDesign_Marking)
ObjectPropertyDomain(:hasShapeDesign_Marking :ShapeDesign)
ObjectPropertyRange(:hasShapeDesign_Marking :Marking)

# Object Property: :hasSkuObject_Sku (:hasSkuObject_Sku)

FunctionalObjectProperty(:hasSkuObject_Sku)
ObjectPropertyDomain(:hasSkuObject_Sku :SkuObject)
ObjectPropertyRange(:hasSkuObject_Sku :StockKeepingUnit)

# Object Property: :hasSlot_Part (:hasSlot_Part)

FunctionalObjectProperty(:hasSlot_Part)
ObjectPropertyDomain(:hasSlot_Part :Slot)
ObjectPropertyRange(:hasSlot_Part :Part)

# Object Property: :hasSlot_PartRefAndPose (:hasSlot_PartRefAndPose)

FunctionalObjectProperty(:hasSlot_PartRefAndPose)
ObjectPropertyDomain(:hasSlot_PartRefAndPose :Slot)
ObjectPropertyRange(:hasSlot_PartRefAndPose :PartRefAndPose)

# Object Property: :hasSolidObject_PrimaryLocation (:hasSolidObject_PrimaryLocation)

FunctionalObjectProperty(:hasSolidObject_PrimaryLocation)
InverseFunctionalObjectProperty(:hasSolidObject_PrimaryLocation)
ObjectPropertyDomain(:hasSolidObject_PrimaryLocation :SolidObject)
ObjectPropertyRange(:hasSolidObject_PrimaryLocation :PhysicalLocation)

# Object Property: :hasSolidObject_SecondaryLocation (:hasSolidObject_SecondaryLocation)

InverseFunctionalObjectProperty(:hasSolidObject_SecondaryLocation)
ObjectPropertyDomain(:hasSolidObject_SecondaryLocation :SolidObject)
ObjectPropertyRange(:hasSolidObject_SecondaryLocation :PhysicalLocation)

# Object Property: :hasStockKeepingUnit_EffectorAndGrasp (:hasStockKeepingUnit_EffectorAndGrasp)

InverseFunctionalObjectProperty(:hasStockKeepingUnit_EffectorAndGrasp)
ObjectPropertyDomain(:hasStockKeepingUnit_EffectorAndGrasp :StockKeepingUnit)
ObjectPropertyRange(:hasStockKeepingUnit_EffectorAndGrasp :EndEffectorGrasp)

# Object Property: :hasStockKeepingUnit_ExternalShape (:hasStockKeepingUnit_ExternalShape)

FunctionalObjectProperty(:hasStockKeepingUnit_ExternalShape)
InverseFunctionalObjectProperty(:hasStockKeepingUnit_ExternalShape)
ObjectPropertyDomain(:hasStockKeepingUnit_ExternalShape :StockKeepingUnit)
ObjectPropertyRange(:hasStockKeepingUnit_ExternalShape :ExternalShape)

# Object Property: :hasStockKeepingUnit_InternalShape (:hasStockKeepingUnit_InternalShape)

FunctionalObjectProperty(:hasStockKeepingUnit_InternalShape)
InverseFunctionalObjectProperty(:hasStockKeepingUnit_InternalShape)
ObjectPropertyDomain(:hasStockKeepingUnit_InternalShape :StockKeepingUnit)
ObjectPropertyRange(:hasStockKeepingUnit_InternalShape :InternalShape)

# Object Property: :hasThreeFingerGrasp_GraspPose1 (:hasThreeFingerGrasp_GraspPose1)

FunctionalObjectProperty(:hasThreeFingerGrasp_GraspPose1)
InverseFunctionalObjectProperty(:hasThreeFingerGrasp_GraspPose1)
ObjectPropertyDomain(:hasThreeFingerGrasp_GraspPose1 :ThreeFingerGrasp)
ObjectPropertyRange(:hasThreeFingerGrasp_GraspPose1 :PoseOnlyLocation)

# Object Property: :hasThreeFingerGrasp_GraspPose2 (:hasThreeFingerGrasp_GraspPose2)

FunctionalObjectProperty(:hasThreeFingerGrasp_GraspPose2)
InverseFunctionalObjectProperty(:hasThreeFingerGrasp_GraspPose2)
ObjectPropertyDomain(:hasThreeFingerGrasp_GraspPose2 :ThreeFingerGrasp)
ObjectPropertyRange(:hasThreeFingerGrasp_GraspPose2 :PoseOnlyLocation)

# Object Property: :hasThreeFingerGrasp_GraspPose3 (:hasThreeFingerGrasp_GraspPose3)

FunctionalObjectProperty(:hasThreeFingerGrasp_GraspPose3)
InverseFunctionalObjectProperty(:hasThreeFingerGrasp_GraspPose3)
ObjectPropertyDomain(:hasThreeFingerGrasp_GraspPose3 :ThreeFingerGrasp)
ObjectPropertyRange(:hasThreeFingerGrasp_GraspPose3 :PoseOnlyLocation)

# Object Property: :hasThreeFingerGrasp_ThreeFingerGripper (:hasThreeFingerGrasp_ThreeFingerGripper)

FunctionalObjectProperty(:hasThreeFingerGrasp_ThreeFingerGripper)
ObjectPropertyDomain(:hasThreeFingerGrasp_ThreeFingerGripper :ThreeFingerGrasp)
ObjectPropertyRange(:hasThreeFingerGrasp_ThreeFingerGripper :GripperThreeFinger)

# Object Property: :hasTwoJawsGrasp_GraspPose1 (:hasTwoJawsGrasp_GraspPose1)

FunctionalObjectProperty(:hasTwoJawsGrasp_GraspPose1)
InverseFunctionalObjectProperty(:hasTwoJawsGrasp_GraspPose1)
ObjectPropertyDomain(:hasTwoJawsGrasp_GraspPose1 :TwoJawsGrasp)
ObjectPropertyRange(:hasTwoJawsGrasp_GraspPose1 :PoseOnlyLocation)

# Object Property: :hasTwoJawsGrasp_GraspPose2 (:hasTwoJawsGrasp_GraspPose2)

FunctionalObjectProperty(:hasTwoJawsGrasp_GraspPose2)
InverseFunctionalObjectProperty(:hasTwoJawsGrasp_GraspPose2)
ObjectPropertyDomain(:hasTwoJawsGrasp_GraspPose2 :TwoJawsGrasp)
ObjectPropertyRange(:hasTwoJawsGrasp_GraspPose2 :PoseOnlyLocation)

# Object Property: :hasTwoJawsGrasp_TwoJawsGripper (:hasTwoJawsGrasp_TwoJawsGripper)

FunctionalObjectProperty(:hasTwoJawsGrasp_TwoJawsGripper)
ObjectPropertyDomain(:hasTwoJawsGrasp_TwoJawsGripper :TwoJawsGrasp)
ObjectPropertyRange(:hasTwoJawsGrasp_TwoJawsGripper :GripperTwoJaws)

# Object Property: :hasVacuumEffectorSingleGrasp_GraspPose (:hasVacuumEffectorSingleGrasp_GraspPose)

FunctionalObjectProperty(:hasVacuumEffectorSingleGrasp_GraspPose)
InverseFunctionalObjectProperty(:hasVacuumEffectorSingleGrasp_GraspPose)
ObjectPropertyDomain(:hasVacuumEffectorSingleGrasp_GraspPose :VacuumEffectorSingleGrasp)
ObjectPropertyRange(:hasVacuumEffectorSingleGrasp_GraspPose :PoseOnlyLocation)

# Object Property: :hasVacuumEffectorSingleGrasp_VacuumEffectorSingle (:hasVacuumEffectorSingleGrasp_VacuumEffectorSingle)

FunctionalObjectProperty(:hasVacuumEffectorSingleGrasp_VacuumEffectorSingle)
ObjectPropertyDomain(:hasVacuumEffectorSingleGrasp_VacuumEffectorSingle :VacuumEffectorSingleGrasp)
ObjectPropertyRange(:hasVacuumEffectorSingleGrasp_VacuumEffectorSingle :VacuumEffectorSingleCup)

# Object Property: :hasWorkTable_ObjectOnTable (:hasWorkTable_ObjectOnTable)

InverseFunctionalObjectProperty(:hasWorkTable_ObjectOnTable)
ObjectPropertyDomain(:hasWorkTable_ObjectOnTable :WorkTable)
ObjectPropertyRange(:hasWorkTable_ObjectOnTable :SolidObject)


############################
#   Data Properties
############################

# Data Property: :hasBoxyShape_HasTop (:hasBoxyShape_HasTop)

FunctionalDataProperty(:hasBoxyShape_HasTop)
DataPropertyDomain(:hasBoxyShape_HasTop :BoxyShape)
DataPropertyRange(:hasBoxyShape_HasTop xsd:boolean)

# Data Property: :hasBoxyShape_Height (:hasBoxyShape_Height)

FunctionalDataProperty(:hasBoxyShape_Height)
DataPropertyDomain(:hasBoxyShape_Height :BoxyShape)
DataPropertyRange(:hasBoxyShape_Height xsd:decimal)

# Data Property: :hasBoxyShape_Length (:hasBoxyShape_Length)

FunctionalDataProperty(:hasBoxyShape_Length)
DataPropertyDomain(:hasBoxyShape_Length :BoxyShape)
DataPropertyRange(:hasBoxyShape_Length xsd:decimal)

# Data Property: :hasBoxyShape_Width (:hasBoxyShape_Width)

FunctionalDataProperty(:hasBoxyShape_Width)
DataPropertyDomain(:hasBoxyShape_Width :BoxyShape)
DataPropertyRange(:hasBoxyShape_Width xsd:decimal)

# Data Property: :hasCylindricalShape_Diameter (:hasCylindricalShape_Diameter)

FunctionalDataProperty(:hasCylindricalShape_Diameter)
DataPropertyDomain(:hasCylindricalShape_Diameter :CylindricalShape)
DataPropertyRange(:hasCylindricalShape_Diameter xsd:decimal)

# Data Property: :hasCylindricalShape_HasTop (:hasCylindricalShape_HasTop)

FunctionalDataProperty(:hasCylindricalShape_HasTop)
DataPropertyDomain(:hasCylindricalShape_HasTop :CylindricalShape)
DataPropertyRange(:hasCylindricalShape_HasTop xsd:boolean)

# Data Property: :hasCylindricalShape_Height (:hasCylindricalShape_Height)

FunctionalDataProperty(:hasCylindricalShape_Height)
DataPropertyDomain(:hasCylindricalShape_Height :CylindricalShape)
DataPropertyRange(:hasCylindricalShape_Height xsd:decimal)

# Data Property: :hasEndEffectorHolder_EndEffectorSlot (:hasEndEffectorHolder_EndEffectorSlot)

FunctionalDataProperty(:hasEndEffectorHolder_EndEffectorSlot)
DataPropertyDomain(:hasEndEffectorHolder_EndEffectorSlot :EndEffectorHolder)
DataPropertyRange(:hasEndEffectorHolder_EndEffectorSlot xsd:string)

# Data Property: :hasEndEffector_Description (:hasEndEffector_Description)

FunctionalDataProperty(:hasEndEffector_Description)
DataPropertyDomain(:hasEndEffector_Description :EndEffector)
DataPropertyRange(:hasEndEffector_Description xsd:string)

# Data Property: :hasEndEffector_MaximumLoadWeight (:hasEndEffector_MaximumLoadWeight)

FunctionalDataProperty(:hasEndEffector_MaximumLoadWeight)
DataPropertyDomain(:hasEndEffector_MaximumLoadWeight :EndEffector)
DataPropertyRange(:hasEndEffector_MaximumLoadWeight xsd:decimal)

# Data Property: :hasExternalShape_ModelFileName (:hasExternalShape_ModelFileName)

FunctionalDataProperty(:hasExternalShape_ModelFileName)
DataPropertyDomain(:hasExternalShape_ModelFileName :ExternalShape)
DataPropertyRange(:hasExternalShape_ModelFileName xsd:string)

# Data Property: :hasExternalShape_ModelFormatName (:hasExternalShape_ModelFormatName)

FunctionalDataProperty(:hasExternalShape_ModelFormatName)
DataPropertyDomain(:hasExternalShape_ModelFormatName :ExternalShape)
DataPropertyRange(:hasExternalShape_ModelFormatName xsd:string)

# Data Property: :hasExternalShape_ModelName (:hasExternalShape_ModelName)

FunctionalDataProperty(:hasExternalShape_ModelName)
DataPropertyDomain(:hasExternalShape_ModelName :ExternalShape)
DataPropertyRange(:hasExternalShape_ModelName xsd:string)

# Data Property: :hasGripperEffector_MaxGripWidth (:hasGripperEffector_MaxGripWidth)

FunctionalDataProperty(:hasGripperEffector_MaxGripWidth)
DataPropertyDomain(:hasGripperEffector_MaxGripWidth :GripperEffector)
DataPropertyRange(:hasGripperEffector_MaxGripWidth xsd:decimal)

# Data Property: :hasKittingWorkstation_AngleUnit (:hasKittingWorkstation_AngleUnit)

FunctionalDataProperty(:hasKittingWorkstation_AngleUnit)
DataPropertyDomain(:hasKittingWorkstation_AngleUnit :KittingWorkstation)
DataPropertyRange(:hasKittingWorkstation_AngleUnit xsd:string)

# Data Property: :hasKittingWorkstation_LengthUnit (:hasKittingWorkstation_LengthUnit)

FunctionalDataProperty(:hasKittingWorkstation_LengthUnit)
DataPropertyDomain(:hasKittingWorkstation_LengthUnit :KittingWorkstation)
DataPropertyRange(:hasKittingWorkstation_LengthUnit xsd:string)

# Data Property: :hasKittingWorkstation_WeightUnit (:hasKittingWorkstation_WeightUnit)

FunctionalDataProperty(:hasKittingWorkstation_WeightUnit)
DataPropertyDomain(:hasKittingWorkstation_WeightUnit :KittingWorkstation)
DataPropertyRange(:hasKittingWorkstation_WeightUnit xsd:string)

# Data Property: :hasLargeBoxWithPartsTrays_Capacity (:hasLargeBoxWithPartsTrays_Capacity)

FunctionalDataProperty(:hasLargeBoxWithPartsTrays_Capacity)
DataPropertyDomain(:hasLargeBoxWithPartsTrays_Capacity :LargeBoxWithPartsTrays)
DataPropertyRange(:hasLargeBoxWithPartsTrays_Capacity xsd:positiveInteger)

# Data Property: :hasLargeContainer_SerialNumber (:hasLargeContainer_SerialNumber)

FunctionalDataProperty(:hasLargeContainer_SerialNumber)
DataPropertyDomain(:hasLargeContainer_SerialNumber :LargeContainer)
DataPropertyRange(:hasLargeContainer_SerialNumber xsd:NMTOKEN)

# Data Property: :hasMarkingModel_MarkingFileName (:hasMarkingModel_MarkingFileName)

FunctionalDataProperty(:hasMarkingModel_MarkingFileName)
DataPropertyDomain(:hasMarkingModel_MarkingFileName :MarkingModel)
DataPropertyRange(:hasMarkingModel_MarkingFileName xsd:string)

# Data Property: :hasMarkingModel_MarkingFormatName (:hasMarkingModel_MarkingFormatName)

FunctionalDataProperty(:hasMarkingModel_MarkingFormatName)
DataPropertyDomain(:hasMarkingModel_MarkingFormatName :MarkingModel)
DataPropertyRange(:hasMarkingModel_MarkingFormatName xsd:string)

# Data Property: :hasMarkingModel_MarkingName (:hasMarkingModel_MarkingName)

FunctionalDataProperty(:hasMarkingModel_MarkingName)
DataPropertyDomain(:hasMarkingModel_MarkingName :MarkingModel)
DataPropertyRange(:hasMarkingModel_MarkingName xsd:string)

# Data Property: :hasNoSkuObject_Weight (:hasNoSkuObject_Weight)

FunctionalDataProperty(:hasNoSkuObject_Weight)
DataPropertyDomain(:hasNoSkuObject_Weight :NoSkuObject)
DataPropertyRange(:hasNoSkuObject_Weight xsd:decimal)

# Data Property: :hasOtherGripperGrasp_MaxForce (:hasOtherGripperGrasp_MaxForce)

FunctionalDataProperty(:hasOtherGripperGrasp_MaxForce)
DataPropertyDomain(:hasOtherGripperGrasp_MaxForce :OtherGripperGrasp)
DataPropertyRange(:hasOtherGripperGrasp_MaxForce xsd:decimal)

# Data Property: :hasOtherGripperGrasp_MinForce (:hasOtherGripperGrasp_MinForce)

FunctionalDataProperty(:hasOtherGripperGrasp_MinForce)
DataPropertyDomain(:hasOtherGripperGrasp_MinForce :OtherGripperGrasp)
DataPropertyRange(:hasOtherGripperGrasp_MinForce xsd:decimal)

# Data Property: :hasParallelGripperGrasp_ApproachSeparation (:hasParallelGripperGrasp_ApproachSeparation)

FunctionalDataProperty(:hasParallelGripperGrasp_ApproachSeparation)
DataPropertyDomain(:hasParallelGripperGrasp_ApproachSeparation :ParallelGripperGrasp)
DataPropertyRange(:hasParallelGripperGrasp_ApproachSeparation xsd:decimal)

# Data Property: :hasParallelGripperGrasp_GraspSeparation (:hasParallelGripperGrasp_GraspSeparation)

FunctionalDataProperty(:hasParallelGripperGrasp_GraspSeparation)
DataPropertyDomain(:hasParallelGripperGrasp_GraspSeparation :ParallelGripperGrasp)
DataPropertyRange(:hasParallelGripperGrasp_GraspSeparation xsd:decimal)

# Data Property: :hasPart_SerialNumber (:hasPart_SerialNumber)

FunctionalDataProperty(:hasPart_SerialNumber)
DataPropertyDomain(:hasPart_SerialNumber :Part)
DataPropertyRange(:hasPart_SerialNumber xsd:NMTOKEN)

# Data Property: :hasPartsBin_PartQuantity (:hasPartsBin_PartQuantity)

FunctionalDataProperty(:hasPartsBin_PartQuantity)
DataPropertyDomain(:hasPartsBin_PartQuantity :PartsBin)
DataPropertyRange(:hasPartsBin_PartQuantity xsd:nonNegativeInteger)

# Data Property: :hasPartsTray_Complete (:hasPartsTray_Complete)

FunctionalDataProperty(:hasPartsTray_Complete)
DataPropertyDomain(:hasPartsTray_Complete :PartsTray)
DataPropertyRange(:hasPartsTray_Complete xsd:boolean)

# Data Property: :hasPartsVessel_SerialNumber (:hasPartsVessel_SerialNumber)

FunctionalDataProperty(:hasPartsVessel_SerialNumber)
DataPropertyDomain(:hasPartsVessel_SerialNumber :PartsVessel)
DataPropertyRange(:hasPartsVessel_SerialNumber xsd:NMTOKEN)

# Data Property: :hasPartsVessel_Weight (:hasPartsVessel_Weight)

FunctionalDataProperty(:hasPartsVessel_Weight)
DataPropertyDomain(:hasPartsVessel_Weight :PartsVessel)
DataPropertyRange(:hasPartsVessel_Weight xsd:decimal)

# Data Property: :hasPhysicalLocation_Timestamp (:hasPhysicalLocation_Timestamp)

FunctionalDataProperty(:hasPhysicalLocation_Timestamp)
DataPropertyDomain(:hasPhysicalLocation_Timestamp :PhysicalLocation)
DataPropertyRange(:hasPhysicalLocation_Timestamp xsd:dateTime)

# Data Property: :hasPoint_X (:hasPoint_X)

FunctionalDataProperty(:hasPoint_X)
DataPropertyDomain(:hasPoint_X :Point)
DataPropertyRange(:hasPoint_X xsd:decimal)

# Data Property: :hasPoint_Y (:hasPoint_Y)

FunctionalDataProperty(:hasPoint_Y)
DataPropertyDomain(:hasPoint_Y :Point)
DataPropertyRange(:hasPoint_Y xsd:decimal)

# Data Property: :hasPoint_Z (:hasPoint_Z)

FunctionalDataProperty(:hasPoint_Z)
DataPropertyDomain(:hasPoint_Z :Point)
DataPropertyRange(:hasPoint_Z xsd:decimal)

# Data Property: :hasPolygon2D_X (:hasPolygon2D_X)

DataPropertyDomain(:hasPolygon2D_X :Polygon2D)
DataPropertyRange(:hasPolygon2D_X xsd:decimal)

# Data Property: :hasPolygon2D_Y (:hasPolygon2D_Y)

DataPropertyDomain(:hasPolygon2D_Y :Polygon2D)
DataPropertyRange(:hasPolygon2D_Y xsd:decimal)

# Data Property: :hasPoseLocation_OrientationStandardDeviation (:hasPoseLocation_OrientationStandardDeviation)

FunctionalDataProperty(:hasPoseLocation_OrientationStandardDeviation)
DataPropertyDomain(:hasPoseLocation_OrientationStandardDeviation :PoseLocation)
DataPropertyRange(:hasPoseLocation_OrientationStandardDeviation xsd:decimal)

# Data Property: :hasPoseLocation_PositionStandardDeviation (:hasPoseLocation_PositionStandardDeviation)

FunctionalDataProperty(:hasPoseLocation_PositionStandardDeviation)
DataPropertyDomain(:hasPoseLocation_PositionStandardDeviation :PoseLocation)
DataPropertyRange(:hasPoseLocation_PositionStandardDeviation xsd:decimal)

# Data Property: :hasPoseTolerance_XAxisTolerance (:hasPoseTolerance_XAxisTolerance)

FunctionalDataProperty(:hasPoseTolerance_XAxisTolerance)
DataPropertyDomain(:hasPoseTolerance_XAxisTolerance :PoseTolerance)
DataPropertyRange(:hasPoseTolerance_XAxisTolerance xsd:decimal)

# Data Property: :hasPoseTolerance_XPointTolerance (:hasPoseTolerance_XPointTolerance)

FunctionalDataProperty(:hasPoseTolerance_XPointTolerance)
DataPropertyDomain(:hasPoseTolerance_XPointTolerance :PoseTolerance)
DataPropertyRange(:hasPoseTolerance_XPointTolerance xsd:decimal)

# Data Property: :hasPoseTolerance_YPointTolerance (:hasPoseTolerance_YPointTolerance)

FunctionalDataProperty(:hasPoseTolerance_YPointTolerance)
DataPropertyDomain(:hasPoseTolerance_YPointTolerance :PoseTolerance)
DataPropertyRange(:hasPoseTolerance_YPointTolerance xsd:decimal)

# Data Property: :hasPoseTolerance_ZAxisTolerance (:hasPoseTolerance_ZAxisTolerance)

FunctionalDataProperty(:hasPoseTolerance_ZAxisTolerance)
DataPropertyDomain(:hasPoseTolerance_ZAxisTolerance :PoseTolerance)
DataPropertyRange(:hasPoseTolerance_ZAxisTolerance xsd:decimal)

# Data Property: :hasPoseTolerance_ZPointTolerance (:hasPoseTolerance_ZPointTolerance)

FunctionalDataProperty(:hasPoseTolerance_ZPointTolerance)
DataPropertyDomain(:hasPoseTolerance_ZPointTolerance :PoseTolerance)
DataPropertyRange(:hasPoseTolerance_ZPointTolerance xsd:decimal)

# Data Property: :hasRelativeLocationIn_Description (:hasRelativeLocationIn_Description)

FunctionalDataProperty(:hasRelativeLocationIn_Description)
DataPropertyDomain(:hasRelativeLocationIn_Description :RelativeLocationIn)
DataPropertyRange(:hasRelativeLocationIn_Description xsd:string)

# Data Property: :hasRelativeLocationOn_Description (:hasRelativeLocationOn_Description)

FunctionalDataProperty(:hasRelativeLocationOn_Description)
DataPropertyDomain(:hasRelativeLocationOn_Description :RelativeLocationOn)
DataPropertyRange(:hasRelativeLocationOn_Description xsd:string)

# Data Property: :hasRobot_Description (:hasRobot_Description)

FunctionalDataProperty(:hasRobot_Description)
DataPropertyDomain(:hasRobot_Description :Robot)
DataPropertyRange(:hasRobot_Description xsd:string)

# Data Property: :hasRobot_MaximumLoadWeight (:hasRobot_MaximumLoadWeight)

FunctionalDataProperty(:hasRobot_MaximumLoadWeight)
DataPropertyDomain(:hasRobot_MaximumLoadWeight :Robot)
DataPropertyRange(:hasRobot_MaximumLoadWeight xsd:decimal)

# Data Property: :hasShapeDesign_Description (:hasShapeDesign_Description)

FunctionalDataProperty(:hasShapeDesign_Description)
DataPropertyDomain(:hasShapeDesign_Description :ShapeDesign)
DataPropertyRange(:hasShapeDesign_Description xsd:string)

# Data Property: :hasSlot_ID (:hasSlot_ID)

FunctionalDataProperty(:hasSlot_ID)
DataPropertyDomain(:hasSlot_ID :Slot)
DataPropertyRange(:hasSlot_ID xsd:integer)

# Data Property: :hasSlot_IsOccupied (:hasSlot_IsOccupied)

FunctionalDataProperty(:hasSlot_IsOccupied)
DataPropertyDomain(:hasSlot_IsOccupied :Slot)
DataPropertyRange(:hasSlot_IsOccupied xsd:boolean)

# Data Property: :hasStockKeepingUnit_Description (:hasStockKeepingUnit_Description)

FunctionalDataProperty(:hasStockKeepingUnit_Description)
DataPropertyDomain(:hasStockKeepingUnit_Description :StockKeepingUnit)
DataPropertyRange(:hasStockKeepingUnit_Description xsd:string)

# Data Property: :hasStockKeepingUnit_Weight (:hasStockKeepingUnit_Weight)

FunctionalDataProperty(:hasStockKeepingUnit_Weight)
DataPropertyDomain(:hasStockKeepingUnit_Weight :StockKeepingUnit)
DataPropertyRange(:hasStockKeepingUnit_Weight xsd:decimal)

# Data Property: :hasThreeFingerGrasp_MaxForce (:hasThreeFingerGrasp_MaxForce)

FunctionalDataProperty(:hasThreeFingerGrasp_MaxForce)
DataPropertyDomain(:hasThreeFingerGrasp_MaxForce :ThreeFingerGrasp)
DataPropertyRange(:hasThreeFingerGrasp_MaxForce xsd:decimal)

# Data Property: :hasThreeFingerGrasp_MinForce (:hasThreeFingerGrasp_MinForce)

FunctionalDataProperty(:hasThreeFingerGrasp_MinForce)
DataPropertyDomain(:hasThreeFingerGrasp_MinForce :ThreeFingerGrasp)
DataPropertyRange(:hasThreeFingerGrasp_MinForce xsd:decimal)

# Data Property: :hasTwoJawsGrasp_MaxForce (:hasTwoJawsGrasp_MaxForce)

FunctionalDataProperty(:hasTwoJawsGrasp_MaxForce)
DataPropertyDomain(:hasTwoJawsGrasp_MaxForce :TwoJawsGrasp)
DataPropertyRange(:hasTwoJawsGrasp_MaxForce xsd:decimal)

# Data Property: :hasTwoJawsGrasp_MinForce (:hasTwoJawsGrasp_MinForce)

FunctionalDataProperty(:hasTwoJawsGrasp_MinForce)
DataPropertyDomain(:hasTwoJawsGrasp_MinForce :TwoJawsGrasp)
DataPropertyRange(:hasTwoJawsGrasp_MinForce xsd:decimal)

# Data Property: :hasVacuumEffectorMultiCup_ArrayNumber (:hasVacuumEffectorMultiCup_ArrayNumber)

FunctionalDataProperty(:hasVacuumEffectorMultiCup_ArrayNumber)
DataPropertyDomain(:hasVacuumEffectorMultiCup_ArrayNumber :VacuumEffectorMultiCup)
DataPropertyRange(:hasVacuumEffectorMultiCup_ArrayNumber xsd:positiveInteger)

# Data Property: :hasVacuumEffectorMultiCup_ArrayRadius (:hasVacuumEffectorMultiCup_ArrayRadius)

FunctionalDataProperty(:hasVacuumEffectorMultiCup_ArrayRadius)
DataPropertyDomain(:hasVacuumEffectorMultiCup_ArrayRadius :VacuumEffectorMultiCup)
DataPropertyRange(:hasVacuumEffectorMultiCup_ArrayRadius xsd:decimal)

# Data Property: :hasVacuumEffector_CupDiameter (:hasVacuumEffector_CupDiameter)

FunctionalDataProperty(:hasVacuumEffector_CupDiameter)
DataPropertyDomain(:hasVacuumEffector_CupDiameter :VacuumEffector)
DataPropertyRange(:hasVacuumEffector_CupDiameter xsd:decimal)

# Data Property: :hasVacuumEffector_Length (:hasVacuumEffector_Length)

FunctionalDataProperty(:hasVacuumEffector_Length)
DataPropertyDomain(:hasVacuumEffector_Length :VacuumEffector)
DataPropertyRange(:hasVacuumEffector_Length xsd:decimal)

# Data Property: :hasVector_I (:hasVector_I)

FunctionalDataProperty(:hasVector_I)
DataPropertyDomain(:hasVector_I :Vector)
DataPropertyRange(:hasVector_I xsd:decimal)

# Data Property: :hasVector_J (:hasVector_J)

FunctionalDataProperty(:hasVector_J)
DataPropertyDomain(:hasVector_J :Vector)
DataPropertyRange(:hasVector_J xsd:decimal)

# Data Property: :hasVector_K (:hasVector_K)

FunctionalDataProperty(:hasVector_K)
DataPropertyDomain(:hasVector_K :Vector)
DataPropertyRange(:hasVector_K xsd:decimal)



############################
#   Classes
############################

# Class: :BoxVolume (:BoxVolume)

AnnotationAssertion(rdfs:comment :BoxVolume "BoxVolume is derived from DataThing.
  An instance of BoxVolume has the following:
    MaximumPoint
    MinimumPoint.
 
  The MaximumPoint and MinimumPoint are diagonally opposite corner
  points of a box shaped volume whose edges are aligned with the
  coordinate system in which the BoxVolume is located. The
  MinimumPoint has the minimum values of X, Y, and Z. The
  MaximumPoint has the maximum values of X, Y, and Z.")
EquivalentClasses(:BoxVolume ObjectIntersectionOf(ObjectSomeValuesFrom(:hasBoxVolume_MaximumPoint :Point) ObjectAllValuesFrom(:hasBoxVolume_MaximumPoint :Point)))
EquivalentClasses(:BoxVolume ObjectIntersectionOf(ObjectSomeValuesFrom(:hasBoxVolume_MinimumPoint :Point) ObjectAllValuesFrom(:hasBoxVolume_MinimumPoint :Point)))
SubClassOf(:BoxVolume :DataThing)

# Class: :BoxyShape (:BoxyShape)

AnnotationAssertion(rdfs:comment :BoxyShape "BoxyShape is derived from InternalShape.
  An instance of BoxyShape has the following:
    Description (inherited)
    Marking (inherited, optional, multiple)
    Length
    Width
    Height
    HasTop.
 
  A BoxyShape is box shaped. The Length is larger of the two
  dimensions that are not the Height. The Width is smaller of the two
  dimensions that are not the Height. The coordinate system of a
  BoxyShape (i.e. the thing that is located and oriented by a
  Pose) has its origin in the middle of the bottom, its Z-axis
  parallel to the height sides and pointing into the box, and its
  X-axis parallel to the length sides. If HasTop is true, the top of
  the box (i.e. the side through which the +Z axis passes) exists and
  is closed. If HasTop is false, the box has no top.")
EquivalentClasses(:BoxyShape ObjectIntersectionOf(DataSomeValuesFrom(:hasBoxyShape_HasTop xsd:boolean) DataAllValuesFrom(:hasBoxyShape_HasTop xsd:boolean)))
SubClassOf(:BoxyShape :InternalShape)

# Class: :CylindricalShape (:CylindricalShape)

AnnotationAssertion(rdfs:comment :CylindricalShape "CylindricalShape is derived from InternalShape.
  An instance of CylindricalShape has the following:
    Description (inherited)
    Marking (inherited, optional, multiple)
    Diameter
    Height
    HasTop.
 
  The cylinder is a right circular cylinder with a circular base
  having the given Diameter. The axis is perpendicular to the base.
  The base is always a surface that is part of the cylinder. The
  sides of the cylinder stop at the given Height as if cut by a plane
  perpendicular to the axis. The coordinate system of a
  CylindricalShape (i.e. the thing that is located and oriented
  by a pose) has its origin in the middle of the bottom, and its
  Z-axis on the axis of the cylinder. If HasTop is true, the top of
  the cylinder (i.e. the side through which the +Z axis passes)
  exists and is closed. If HasTop is false, the cylinder has no top.")
EquivalentClasses(:CylindricalShape ObjectIntersectionOf(DataSomeValuesFrom(:hasCylindricalShape_HasTop xsd:boolean) DataAllValuesFrom(:hasCylindricalShape_HasTop xsd:boolean)))
SubClassOf(:CylindricalShape :InternalShape)

# Class: :DataThing (:DataThing)

AnnotationAssertion(rdfs:comment :DataThing "An instance of DataThing has the following:
    .
  DataThing is an abstract type from which more specific types of
  data thing are derived. That includes all complex data types such
  as Vector, PhysicalLocation, etc.")
DisjointClasses(:DataThing :SolidObject)
DisjointUnion(:DataThing :BoxVolume :EndEffectorGrasp :Marking :MarkingLayout :MarkingModel :PartRefAndPose :PartsTrayDesign :PhysicalLocation :Point :Polygon2D :Pose :PoseTolerance :ShapeDesign :Slot :StockKeepingUnit :Vector)

# Class: :EndEffector (:EndEffector)

AnnotationAssertion(rdfs:comment :EndEffector "EndEffector is derived from NoSkuObject.
  An instance of EndEffector has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Weight (inherited, optional)
    EffectorAndGrasp (inherited, optional, multiple)
    Description
    MaximumLoadWeight
    HeldObject (optional).
 
  EndEffector is an abstract type from which more specific types
  of end effector are derived. An EndEffector is an end effector
  for a robot. The optional HeldObject is for the object being held
  by the end effector, if the end effector is holding an object.
  Every EndEffector is either a GripperEffector or a
  VacuumEffector. Every EndEffector in a KittingWorkstation
  is either attached to the end of a robot arm or sitting in an
  EndEffectorHolder at an EndEffectorChangingStation.")
EquivalentClasses(:EndEffector ObjectIntersectionOf(ObjectSomeValuesFrom(:hasEndEffector_HeldObjectOffset :PhysicalLocation) ObjectAllValuesFrom(:hasEndEffector_HeldObjectOffset :PhysicalLocation)))
EquivalentClasses(:EndEffector ObjectIntersectionOf(DataSomeValuesFrom(:hasEndEffector_Description xsd:string) DataAllValuesFrom(:hasEndEffector_Description xsd:string)))
SubClassOf(:EndEffector :NoSkuObject)
DisjointUnion(:EndEffector :GripperEffector :VacuumEffector)

# Class: :EndEffectorChangingStation (:EndEffectorChangingStation)

AnnotationAssertion(rdfs:comment :EndEffectorChangingStation "EndEffectorChangingStation is derived from NoSkuObject.
  An instance of EndEffectorChangingStation has the
  following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Weight (inherited, optional)
    EffectorAndGrasp (inherited, optional, multiple)
    Base
    EndEffectorHolder (multiple).
 
  An EndEffectorChangingStation is a place where end effectors
  are stored and where the robot can change end effectors. The
  coordinate system of an EndEffectorChangingStation is in the
  same place as the coordinate system of its Base. The shape of an
  EndEffectorChangingStation may also be found from the shapes of
  the Base and the EndEffectorHolders and their relative positions.")
SubClassOf(:EndEffectorChangingStation :NoSkuObject)

# Class: :EndEffectorGrasp (:EndEffectorGrasp)

AnnotationAssertion(rdfs:comment :EndEffectorGrasp "EndEffectorGrasp is derived from DataThing.
  An instance of EndEffectorGrasp has the following:
    .
  EndEffectorGrasp describes how a particular end effector
  can grasp a particular stock keeping unit. Instances of
  EndEffectorGrasp must be instances of one of the derived
  types: VacuumEffectorSingleGrasp")
SubClassOf(:EndEffectorGrasp :DataThing)
DisjointUnion(:EndEffectorGrasp :OtherGripperGrasp :ParallelGripperGrasp :ThreeFingerGrasp :TwoJawsGrasp :VacuumEffectorSingleGrasp)

# Class: :EndEffectorHolder (:EndEffectorHolder)

AnnotationAssertion(rdfs:comment :EndEffectorHolder "EndEffectorHolder is derived from NoSkuObject.
  An instance of EndEffectorHolder has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Weight (inherited, optional)
    EffectorAndGrasp (inherited, optional, multiple)
    EndEffector (optional).
  An EndEffectorHolder holds zero or one end effector and is part
  of an EndEffectorChangingStation. The EndEffectorSlot is the
  name of the effector that should occupy this holder. The
  EndEffector is an effector that is in this holder.")
EquivalentClasses(:EndEffectorHolder ObjectIntersectionOf(DataSomeValuesFrom(:hasEndEffectorHolder_EndEffectorSlot xsd:string) DataAllValuesFrom(:hasEndEffectorHolder_EndEffectorSlot xsd:string)))
SubClassOf(:EndEffectorHolder :NoSkuObject)

# Class: :ExternalShape (:ExternalShape)

AnnotationAssertion(rdfs:comment :ExternalShape "ExternalShape is derived from ShapeDesign.
  An instance of ExternalShape has the following:
    Description (inherited)
    Marking (inherited, optional, multiple)
    ModelFormatName
    ModelFileName
    ModelName (optional).
 
  An ExternalShape is a shape defined in an external file. The
  ModelFormatName is the name of the format of model (for example,
  'STEP Advanced Brep' or 'USARSim'). The ModelFileName is the name
  of the file containing the model and may include a path (for
  example 'partFiles/STEP/ANC101.stp'). The model file may contain
  more than one shape model. The ModelName is optional and is the
  name of a model within the model file. The ModelName is necessary
  if the model file contains more than one model.")
EquivalentClasses(:ExternalShape ObjectIntersectionOf(DataSomeValuesFrom(:hasExternalShape_ModelFileName xsd:string) DataAllValuesFrom(:hasExternalShape_ModelFileName xsd:string)))
EquivalentClasses(:ExternalShape ObjectIntersectionOf(DataSomeValuesFrom(:hasExternalShape_ModelFormatName xsd:string) DataAllValuesFrom(:hasExternalShape_ModelFormatName xsd:string)))
SubClassOf(:ExternalShape :ShapeDesign)

# Class: :GripperEffector (:GripperEffector)

AnnotationAssertion(rdfs:comment :GripperEffector "GripperEffector is derived from EndEffector.
  An instance of GripperEffector has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Weight (inherited, optional)
    EffectorAndGrasp (inherited, optional, multiple)
    Description (inherited)
    MaximumLoadWeight (inherited)
    HeldObject (inherited, optional)
    MaxGripWidth (optional).
 
  A GripperEffector holds an object by gripping
  it with fingers or jaws. The MaxGripWidth is largest distance
  between two parallel planes that the gripper can grasp.")
SubClassOf(:GripperEffector :EndEffector)
DisjointUnion(:GripperEffector :GripperOther :GripperParallel :GripperThreeFinger :GripperTwoJaws)

# Class: :GripperOther (:GripperOther)

AnnotationAssertion(rdfs:comment :GripperOther "GripperOther is derived from GripperEffector.
  An instance of GripperOther has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Weight (inherited, optional)
    EffectorAndGrasp (inherited, optional, multiple)
    Description (inherited)
    MaximumLoadWeight (inherited)
    HeldObject (inherited, optional)
    MaxGripWidth (inherited, optional).
 
  A GripperOther is a gripper type that is not any of the other
  types.")
SubClassOf(:GripperOther :GripperEffector)

# Class: :GripperParallel (:GripperParallel)

AnnotationAssertion(rdfs:comment :GripperParallel "GripperParallel is derived from GripperEffector.
  An instance of GripperParallel has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Weight (inherited, optional)
    EffectorAndGrasp (inherited, optional, multiple)
    Description (inherited)
    MaximumLoadWeight (inherited)
    HeldObject (inherited, optional)
    MaxGripWidth (inherited, optional).
 
  A GripperParallel holds an object by gripping it between two
  parallel plates.")
SubClassOf(:GripperParallel :GripperEffector)

# Class: :GripperThreeFinger (:GripperThreeFinger)

AnnotationAssertion(rdfs:comment :GripperThreeFinger "GripperThreeFinger is derived from GripperEffector.
  An instance of GripperThreeFinger has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Weight (inherited, optional)
    EffectorAndGrasp (inherited, optional, multiple)
    Description (inherited
    MaximumLoadWeight (inherited)
    HeldObject (inherited, optional)
    MaxGripWidth (inherited, optional).
 
  A GripperThreeFinger holds an object by gripping
  it with three fingers.")
SubClassOf(:GripperThreeFinger :GripperEffector)

# Class: :GripperTwoJaws (:GripperTwoJaws)

AnnotationAssertion(rdfs:comment :GripperTwoJaws "GripperTwoJaws is derived from GripperEffector.
  An instance of GripperTwoJaws has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Weight (inherited, optional)
    EffectorAndGrasp (inherited, optional, multiple)
    Description (inherited)
    MaximumLoadWeight (inherited)
    HeldObject (inherited, optional)
    MaxGripWidth (inherited, optional).
 
  A GripperTwoJaws holds an object by gripping it with two jaws.")
SubClassOf(:GripperTwoJaws :GripperEffector)

# Class: :Human (:Human)

AnnotationAssertion(rdfs:comment :Human "Human is derived from NoSkuObject.
  An instance of Human has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Weight (inherited, optional)
    EffectorAndGrasp (inherited, optional, multiple).
 
  A Human is a type representing a human being. The shape of
  a human is the shape of a bounding box (or other bounding shape)
  that encloses the human completely.")
SubClassOf(:Human :NoSkuObject)

# Class: :InternalShape (:InternalShape)

AnnotationAssertion(rdfs:comment :InternalShape "InternalShape is derived from ShapeDesign.
  An instance of InternalShape has the following:
    Description (inherited)
    Marking (inherited, optional, multiple).
 
  InternalShape is an abstract type from which more specific
  types of shape are derived. Instances of InternalShape in a
  instance file contain information about the appearance of the
  shape without referring to another file.")
SubClassOf(:InternalShape :ShapeDesign)
DisjointUnion(:InternalShape :BoxyShape :CylindricalShape)

# Class: :KittingWorkstation (:KittingWorkstation)

AnnotationAssertion(rdfs:comment :KittingWorkstation "KittingWorkstation is derived from NoSkuObject.
  An instance of KittingWorkstation has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Weight (inherited, optional)
    EffectorAndGrasp (inherited, optional, multiple)
    AngleUnit
    LengthUnit
    ChangingStation
    Object (multiple)
    OtherObstacle (optional, multiple)
    PartsTrayDesign (multiple)
    Robot
    Sku (multiple)
    WeightUnit.
 
  All angle, length, and weight values related to the workstation
  use the units implicitly.
 
  The workstation includes one robot and one end effector changing
  station. There may be many instances of Object in the workstation,
  including such things as work tables, large boxes with parts trays,
  large boxes with empty vessels.
 
  The collection of instances of PartsTrayDesign is a library of all
  parts tray designs known to the workstation, both those that supply
  parts and those that are kits to be built.
 
  The collection of instances of Sku is a library of all stock
  keeping units known to the workstation.
 
  The OtherObstacles are obstacles to robot motion of unspecified
  type.
 
  Containers of various sorts enter and leave the workstation. The
  robot builds kits of parts by executing kitting plans as directed
  by a kitting plan execution system.
 
  The location of each instance of KittingWorkstation should be given
  relative to itself in order to end the chain of relative locations.")
SubClassOf(:KittingWorkstation :NoSkuObject)

# Class: :LargeBoxWithEmptyVessels (:LargeBoxWithEmptyVessels)

AnnotationAssertion(rdfs:comment :LargeBoxWithEmptyVessels "LargeBoxWithEmptyVessels is derived from NoSkuObject.
  An instance of LargeBoxWithEmptyVessels has the
  following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Weight (inherited, optional)
    EffectorAndGrasp (inherited, optional, multiple)
    LargeContainer
    Vessel (optional, multiple).
 
  The location point of the LargeContainer should be (0,0,0), its Z
  axis should be (0,0,1), and its X axis should be (1,0,0). The
  PrimaryLocation of a PartsVessel in a LargeBoxWithEmptyVessels
  should be given by a PoseLocationIn or RelativeLocationIn
	that is relative to the LargeContainer. The PartsVessels in a
  LargeBoxWithEmptyVessels are intended to all be of the same
  SKU, although there is currently no formal requirement for that.")
EquivalentClasses(:LargeBoxWithEmptyVessels ObjectIntersectionOf(ObjectSomeValuesFrom(:hasLargeBoxWithEmptyVessels_LargeContainer :LargeContainer) ObjectAllValuesFrom(:hasLargeBoxWithEmptyVessels_LargeContainer :LargeContainer)))
SubClassOf(:LargeBoxWithEmptyVessels :NoSkuObject)

# Class: :LargeBoxWithPartsTrays (:LargeBoxWithPartsTrays)

AnnotationAssertion(rdfs:comment :LargeBoxWithPartsTrays "LargeBoxWithPartsTrays is derived from NoSkuObject. An
  instance of LargeBoxWithPartsTrays has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Weight (inherited, optional)
    EffectorAndGrasp (inherited, optional, multiple)
    LargeContainer
    PartsTray (optional, multiple)
    PartsTrayDesign
    Capacity.
 
  The coordinate system of a LargeBoxWithPartsTrays is in the same
  place as the coordinate system of its LargeContainer. The
  PrimaryLocation of the LargeContainer should be relative to the
  LargeBoxWithPartsTrays. The PartsTrayDesign is an
  identifier for a PartsTrayDesign. The PrimaryLocation of a
  PartsTray in a LargeBoxWithPartsTrays should be given by a
  PoseLocationIn or RelativeLocationIn that is relative to
  the LargeContainer.
 
  The Capacity is an xs:positiveInteger giving the maximum number of
  PartsTrays of the given design that can be held in the box.
 
  The PartsTrays in a LargeBoxWithPartsTrays must all be of the
  named design.")
EquivalentClasses(:LargeBoxWithPartsTrays ObjectIntersectionOf(ObjectSomeValuesFrom(:hasLargeBoxWithPartsTrays_LargeContainer :LargeContainer) ObjectAllValuesFrom(:hasLargeBoxWithPartsTrays_LargeContainer :LargeContainer)))
EquivalentClasses(:LargeBoxWithPartsTrays ObjectIntersectionOf(ObjectSomeValuesFrom(:hasLargeBoxWithPartsTrays_PartsTrayDesign :PartsTrayDesign) ObjectAllValuesFrom(:hasLargeBoxWithPartsTrays_PartsTrayDesign :PartsTrayDesign)))
EquivalentClasses(:LargeBoxWithPartsTrays ObjectIntersectionOf(DataSomeValuesFrom(:hasLargeBoxWithPartsTrays_Capacity xsd:positiveInteger) DataAllValuesFrom(:hasLargeBoxWithPartsTrays_Capacity xsd:positiveInteger)))
SubClassOf(:LargeBoxWithPartsTrays :NoSkuObject)

# Class: :LargeContainer (:LargeContainer)

AnnotationAssertion(rdfs:comment :LargeContainer "LargeContainer is derived from SkuObject.
  An instance of LargeContainer has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    Sku (inherited)
    SerialNumber.
 
  The Sku specifies the SKU of the LargeContainer. A
  LargeContainer can hold one or more instances of a single type
  of parts vessel or kit.")
EquivalentClasses(:LargeContainer ObjectIntersectionOf(DataSomeValuesFrom(:hasLargeContainer_SerialNumber xsd:NMTOKEN) DataAllValuesFrom(:hasLargeContainer_SerialNumber xsd:NMTOKEN)))
SubClassOf(:LargeContainer :SkuObject)

# Class: :Marking (:Marking)

AnnotationAssertion(rdfs:comment :Marking "Marking is derived from DataThing.
  An instance of Marking has the following:
    MarkingLayout
    Marking Model.
  A Marking is an engraved or printed image on a shape. The
  marking is displayed on an XY Cartesian coordinate system as
  defined by the MarkingLayout. The actual marking is defined by
  the MarkingModel.")
EquivalentClasses(:Marking ObjectIntersectionOf(ObjectSomeValuesFrom(:hasMarking_MarkingLayout :MarkingLayout) ObjectAllValuesFrom(:hasMarking_MarkingLayout :MarkingLayout)))
EquivalentClasses(:Marking ObjectIntersectionOf(ObjectSomeValuesFrom(:hasMarking_MarkingModel :MarkingModel) ObjectAllValuesFrom(:hasMarking_MarkingModel :MarkingModel)))
SubClassOf(:Marking :DataThing)

# Class: :MarkingLayout (:MarkingLayout)

AnnotationAssertion(rdfs:comment :MarkingLayout "MarkingLayout is derived from DataThing.
  An instance of MarkingLayout has the following:
    Point
    XAxis
    YAxis.
  The MarkingLayout represents the coordinate system of a
  marking. The coordinate system of the marking is placed in the
  coordinate system of a shape as given by the Point, XAxis and
  YAxis. The scale of the XAxis and YAxis vectors (which are not
  required to be unit vectors) represents the scale of the
  markings along those axes.")
EquivalentClasses(:MarkingLayout ObjectIntersectionOf(ObjectSomeValuesFrom(:hasMarkingLayout_Point :Point) ObjectAllValuesFrom(:hasMarkingLayout_Point :Point)))
EquivalentClasses(:MarkingLayout ObjectIntersectionOf(ObjectSomeValuesFrom(:hasMarkingLayout_XAxis :Vector) ObjectAllValuesFrom(:hasMarkingLayout_XAxis :Vector)))
EquivalentClasses(:MarkingLayout ObjectIntersectionOf(ObjectSomeValuesFrom(:hasMarkingLayout_YAxis :Vector) ObjectAllValuesFrom(:hasMarkingLayout_YAxis :Vector)))
SubClassOf(:MarkingLayout :DataThing)

# Class: :MarkingModel (:MarkingModel)

AnnotationAssertion(rdfs:comment :MarkingModel "MarkingModel is derived from DataThing.
  An instance of MarkingModel has the following:
    MarkingFormatName
    MarkingFileName
    MarkingName (optional).
  The marking consists of a format name; e.g. JPEG, a marking
  file name; i.e., where the particular marking file is stored,
  and a marking name, i.e., the specific marking if a storage
  file contains multiple markings.")
EquivalentClasses(:MarkingModel ObjectIntersectionOf(DataSomeValuesFrom(:hasMarkingModel_MarkingFileName xsd:string) DataAllValuesFrom(:hasMarkingModel_MarkingFileName xsd:string)))
EquivalentClasses(:MarkingModel ObjectIntersectionOf(DataSomeValuesFrom(:hasMarkingModel_MarkingFormatName xsd:string) DataAllValuesFrom(:hasMarkingModel_MarkingFormatName xsd:string)))
SubClassOf(:MarkingModel :DataThing)

# Class: :NoSkuObject (:NoSkuObject)

AnnotationAssertion(rdfs:comment :NoSkuObject "NoSkuObject is derived from SolidObject.
  An instance of NoSkuObject has the following:
    PrimaryLocation (inherited)
    SecondaryLocations (inherited, optional, multiple)
    InternalShape (optional)
    ExternalShape (optional)
    Weight (optional)
    EffectorAndGrasp (optional, multiple).
  A NoSkuObject is an abstract type from which more specific
  types of solid object are derived. The InternalShape and
  ExternalShape are not required to represent the same shape,
  but they should not be inconsistent. In particular, they must
  use the same coordinate system. If a NoSkuObject consists
  of components, it may also get its shape from the shape of the
  components and their relative positions. In this case one of
  the components should be the root of a tree of reference
  objects containing all components, and the coordinate system
  of the object is the coordinate system of the root component.")
SubClassOf(:NoSkuObject :SolidObject)

# Class: :OtherGripperGrasp (:OtherGripperGrasp)

AnnotationAssertion(rdfs:comment :OtherGripperGrasp "OtherGripperGrasp is derived from EndEffectorGrasp.
  An instance of OtherGripperGrasp has the following:
    OtherGripper
    GraspPose (optional, multiple)
    MaxForce (optional)
    MinForce (optional).
  The OtherGripperName identifies an other gripper that can
  handle an object of a given shape. The GraspPose elements are
  poses from which an object of a given SKU can be grasped by an
  other gripper, with some component of the gripper
  corresponding to each of the poses. The poses are relative to
  the coordinate system of the SKU's shape (so that the value of
  the RefObjectName of each pose is irrelevant, as long as it is
  the name of a SolidObject). The Point in each pose is a point
  at which a surface of the gripper should make contact with the
  shape. The axes of each pose may be used to indicate a
  direction for aligning parts of the gripper. The ZAxis is
  usually normal to the object having the shape and pointing
  away from the object. The GraspPoses should not use the
  optional Timestamp. The MaxForce is the maximum force that the
  gripper may apply. The MinForce is the minimum force that the
  gripper must apply at each pose point in order to lift the
  object. Force is measured in Newtons.")
EquivalentClasses(:OtherGripperGrasp ObjectIntersectionOf(ObjectSomeValuesFrom(:hasOtherGripperGrasp_OtherGripper :GripperOther) ObjectAllValuesFrom(:hasOtherGripperGrasp_OtherGripper :GripperOther)))
SubClassOf(:OtherGripperGrasp :EndEffectorGrasp)

# Class: :ParallelGripperGrasp (:ParallelGripperGrasp)

AnnotationAssertion(rdfs:comment :ParallelGripperGrasp "ParallelGrasp is derived from EndEffectorGrasp. An instance
  of ParallelGrasp has the following: Name (inherited)
  ParallelGripper GraspPose (1-Many) ApproachSeparation
  GraspSeparation. The ParallelGripperName identifies a parallel
  gripper that can handle an object of a given shape. The GraspPose
  element is a pose from which an object of a given SKU can be
  grasped by a parallel gripper. The pose is relative to the
  coordinate system of the SKU's shape (so that the value of the
  RefObjectName of the pose is irrelevant, as long as it is the name
  of a SolidObject). The Point in the pose is a point at which the
  origin of the gripper should be located in order to make contact
  with the shape when the gripper is closed to the GraspSeparation.
  The axes of the pose are used to align the plates of the gripper.
  The ZAxis is usually normal to the object having the shape and
  pointing away from the object. The GraspPose should not use the
  optional Timestamp. The ApproachSeparation if the separation
  between plates necessary for approaching the object. The
  GraspSeparation is the separation necessary for lifting the object.
  Separations are measured in mm.")
EquivalentClasses(:ParallelGripperGrasp ObjectIntersectionOf(ObjectSomeValuesFrom(:hasParallelGripperGrasp_GraspPose :PoseOnlyLocation) ObjectAllValuesFrom(:hasParallelGripperGrasp_GraspPose :PoseOnlyLocation)))
EquivalentClasses(:ParallelGripperGrasp ObjectIntersectionOf(ObjectSomeValuesFrom(:hasParallelGripperGrasp_ParallelGripper :GripperParallel) ObjectAllValuesFrom(:hasParallelGripperGrasp_ParallelGripper :GripperParallel)))
SubClassOf(:ParallelGripperGrasp :EndEffectorGrasp)

# Class: :Part (:Part)

AnnotationAssertion(rdfs:comment :Part "Part is derived from SkuObject.
  An instance of Part has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    Sku (inherited)
    SerialNumber.
 
  The Part represents a part.
  The Sku specifies the SKU for the part.")
EquivalentClasses(:Part ObjectIntersectionOf(DataSomeValuesFrom(:hasPart_SerialNumber xsd:NMTOKEN) DataAllValuesFrom(:hasPart_SerialNumber xsd:NMTOKEN)))
SubClassOf(:Part :SkuObject)

# Class: :PartRefAndPose (:PartRefAndPose)

AnnotationAssertion(rdfs:comment :PartRefAndPose "PartRefAndPose is derived from DataThing.
  An instance of PartRefAndPose has the following:
    Sku
    Pose.
 
  The Sku identifies a type of part. The Pose specifies
  the location and orientation of the part in the coordinate system
  of the vessel of the PartsTrayDesign to which the
  PartRefAndPose belongs.")
EquivalentClasses(:PartRefAndPose ObjectIntersectionOf(ObjectSomeValuesFrom(:hasPartRefAndPose_Pose :Pose) ObjectAllValuesFrom(:hasPartRefAndPose_Pose :Pose)))
EquivalentClasses(:PartRefAndPose ObjectIntersectionOf(ObjectSomeValuesFrom(:hasPartRefAndPose_Sku :StockKeepingUnit) ObjectAllValuesFrom(:hasPartRefAndPose_Sku :StockKeepingUnit)))
SubClassOf(:PartRefAndPose :DataThing)

# Class: :PartsBin (:PartsBin)

AnnotationAssertion(rdfs:comment :PartsBin "PartsBin is derived from PartsVessel.
  An instance of PartsBin has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    Sku (inherited)
    EffectorAndGrasp (inherited, optional, multiple)
    Part (inherited, optional, multiple)
    SerialNumber (inherited)
    Weight (inherited, optional)
    PartSku
    PartQuantity.
 
  A PartsBin holds a number of Parts (PartQuantity) with the
  same SKU (PartSku)in unknown random positions. Each
  Part in the bin should be listed explictly and have a
  RelativeLocationIn with the bin as its RefObject. The
  value of PartQuantity should be the number of instances of Part.")
EquivalentClasses(:PartsBin ObjectIntersectionOf(ObjectSomeValuesFrom(:hasPartsBin_PartSku :StockKeepingUnit) ObjectAllValuesFrom(:hasPartsBin_PartSku :StockKeepingUnit)))
EquivalentClasses(:PartsBin ObjectIntersectionOf(DataSomeValuesFrom(:hasPartsBin_PartQuantity xsd:nonNegativeInteger) DataAllValuesFrom(:hasPartsBin_PartQuantity xsd:nonNegativeInteger)))
SubClassOf(:PartsBin :PartsVessel)

# Class: :PartsTray (:PartsTray)

AnnotationAssertion(rdfs:comment :PartsTray "PartsTray is derived from PartsVessel.
  An instance of Parts has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    Sku (inherited)
    EffectorAndGrasp (inherited, optional, multiple)
    Part (inherited, optional, multiple)
    SerialNumber (inherited)
    Weight (inherited, optional)
    Design
    Complete
    Slot (optional, multiple).
 
  The DesignName is the name of the design of the PartsTray. This
  may be the design of a kit to be built or the design of part
  supply.
  Complete is a boolean indicator of whether the PartsTray matches
  the design. For a kit, that occurs when the kit is completely
  built. For a parts supply, that occurs when it is full, before
  any parts are removed.
 
  Part may occur several times (once for each part in the PartsTray).
 
  The optional Slots may be used to keep track of whether each place
  in the PartsTray that may have a part in it does have a part in it.
  The PartRefAndPose of each Slot should indicate a
  PartRefAndPose in the design of the PartsTray (different for each
  slot).")
EquivalentClasses(:PartsTray ObjectIntersectionOf(ObjectSomeValuesFrom(:hasPartsTray_Design :PartsTrayDesign) ObjectAllValuesFrom(:hasPartsTray_Design :PartsTrayDesign)))
EquivalentClasses(:PartsTray ObjectIntersectionOf(DataSomeValuesFrom(:hasPartsTray_Complete xsd:boolean) DataAllValuesFrom(:hasPartsTray_Complete xsd:boolean)))
SubClassOf(:PartsTray :PartsVessel)

# Class: :PartsTrayDesign (:PartsTrayDesign)

AnnotationAssertion(rdfs:comment :PartsTrayDesign "PartsTrayDesign is derived from DataThing.
  An instance of PartsTrayDesign has the following:
    VesselSku
    PartRefAndPose (multiple).
 
  The VesselSku identifies a type of parts vessel. The
  Pose in a PartRefAndPose is the location of the part relative to the
  the coordinate system of the ShapeDesign of the parts vessel.")
EquivalentClasses(:PartsTrayDesign ObjectIntersectionOf(ObjectSomeValuesFrom(:hasPartsTrayDesign_VesselSku :StockKeepingUnit) ObjectAllValuesFrom(:hasPartsTrayDesign_VesselSku :StockKeepingUnit)))
SubClassOf(:PartsTrayDesign :DataThing)

# Class: :PartsVessel (:PartsVessel)

AnnotationAssertion(rdfs:comment :PartsVessel "PartsVessel is derived from SkuObject.
  An instance of PartsVessel has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    Sku (inherited)
    EffectorAndGrasp (inherited, optional, multiple)
    Part (optional, multiple)
    SerialNumber
    Weight (optional).
  PartsVessel is a container with zero to many parts in it.
	The SkuName identifies the SKU of the PartsVessel.
  The Weight of a PartsVessel will vary according to the weight of
  the parts currently in the vessel.")
EquivalentClasses(:PartsVessel ObjectIntersectionOf(DataSomeValuesFrom(:hasPartsVessel_SerialNumber xsd:NMTOKEN) DataAllValuesFrom(:hasPartsVessel_SerialNumber xsd:NMTOKEN)))
SubClassOf(:PartsVessel :SkuObject)
DisjointUnion(:PartsVessel :PartsBin :PartsTray)

# Class: :PhysicalLocation (:PhysicalLocation)

AnnotationAssertion(rdfs:comment :PhysicalLocation "PhysicalLocation is derived from DataThing.
  An instance of PhysicalLocation has the following:
    RefObject
    Timestamp (optional).
  PhysicalLocation is an abstract type from which more specific
  types of physical location are derived. A PhysicalLocation says
  where a SolidObject is relative to its reference object.
  Timestamp represents the
  most recent date and time when the location was updated.")
EquivalentClasses(:PhysicalLocation ObjectIntersectionOf(ObjectSomeValuesFrom(:hasPhysicalLocation_RefObject :SolidObject) ObjectAllValuesFrom(:hasPhysicalLocation_RefObject :SolidObject)))
SubClassOf(:PhysicalLocation :DataThing)
DisjointUnion(:PhysicalLocation :PoseLocation :RelativeLocationIn :RelativeLocationOn)

# Class: :Point (:Point)

AnnotationAssertion(rdfs:comment :Point "Point is derived from DataThing.
  An instance of Point has the following:
    X
    Y
    Z.
 
  X, Y, and Z are the Cartesian coordinates of the Point.")
EquivalentClasses(:Point ObjectIntersectionOf(DataSomeValuesFrom(:hasPoint_X xsd:decimal) DataAllValuesFrom(:hasPoint_X xsd:decimal)))
EquivalentClasses(:Point ObjectIntersectionOf(DataSomeValuesFrom(:hasPoint_Y xsd:decimal) DataAllValuesFrom(:hasPoint_Y xsd:decimal)))
EquivalentClasses(:Point ObjectIntersectionOf(DataSomeValuesFrom(:hasPoint_Z xsd:decimal) DataAllValuesFrom(:hasPoint_Z xsd:decimal)))
SubClassOf(:Point :DataThing)

# Class: :Polygon2D (:Polygon2D)

AnnotationAssertion(rdfs:comment :Polygon2D "Polygon2D is derived from DataThing.
  An instance of Polygon2D has the following:
    X (multiple)
    Y (multiple).
 
  A Polygon2D is a 2D polygon defined by a sequence of points
  given as pairs of XY coordinates. The number of X elements must be
  the same as the number of Y elements. The Nth X element matches
  with the Nth Y element. The last point should not be the same as
  the first point; the final side of the polygon is from the last
  point to the first point. The polygon should not be
  self-intersecting.")
SubClassOf(:Polygon2D :DataThing)

# Class: :Pose (:Pose)

AnnotationAssertion(rdfs:comment :Pose "Pose is derived from DataThing.
  An instance of Pose has the following:
    Name (inherited, optional)
    Point
    XAxis
    ZAxis.
  The Point locates the origin of a coordinate system. The XAxis and
  ZAxis give the orientation of the coordinate system. The data for
  the Point, the ZAxis and the XAxis are expressed relative to another
  coordinate system.")
EquivalentClasses(:Pose ObjectIntersectionOf(ObjectSomeValuesFrom(:hasPose_Point :Point) ObjectAllValuesFrom(:hasPose_Point :Point)))
EquivalentClasses(:Pose ObjectIntersectionOf(ObjectSomeValuesFrom(:hasPose_XAxis :Vector) ObjectAllValuesFrom(:hasPose_XAxis :Vector)))
EquivalentClasses(:Pose ObjectIntersectionOf(ObjectSomeValuesFrom(:hasPose_ZAxis :Vector) ObjectAllValuesFrom(:hasPose_ZAxis :Vector)))
SubClassOf(:Pose :DataThing)

# Class: :PoseLocation (:PoseLocation)

AnnotationAssertion(rdfs:comment :PoseLocation "PoseLocation is derived from PhysicalLocation.
  An instance of PoseLocation has the following:
    RefObject (inherited)
    Timestamp (inherited, optional)
    Pose
    PositionStandardDeviation (optional)
    OrientationStandardDeviation (optional).
 
  An object located by a PoseLocation may or may not be
  inside or on top of the reference object of the
  PoseLocation.
  The Point in the Pose locates the origin of a coordinate
  system. The XAxis and ZAxis in the Pose give the orientation
  of the coordinate system. The data for the Point, the ZAxis
  and the XAxis are expressed relative to the coordinate system
  of the reference object.
  The PositionStandardDeviation is based on a normal distribution of
  actual position about its given value. Thus, for example, the
  actual position is expected to be within the given
  PositionStandardDeviation amount 68% of the time and within twice
  the given amount 95% of the time. The PositionStandardDeviation is
  measured in the length units being used.
 
  The OrientationStandardDeviation is based on a normal distribution
  of orientation about its given value. The error is to be measured
  as the angle of rotation about a single axis needed to rotate a
  solid object from its stated orientation to its actual orientation.
  The OrientationStandardDeviation is measured in the angle units
  being used.")
EquivalentClasses(:PoseLocation ObjectIntersectionOf(ObjectSomeValuesFrom(:hasPoseLocation_Pose :Pose) ObjectAllValuesFrom(:hasPoseLocation_Pose :Pose)))
SubClassOf(:PoseLocation :PhysicalLocation)
DisjointUnion(:PoseLocation :PoseLocationIn :PoseLocationOn :PoseOnlyLocation)

# Class: :PoseLocationIn (:PoseLocationIn)

AnnotationAssertion(rdfs:comment :PoseLocationIn "PoseLocationIn is derived from PoseLocation.
  An instance of PoseLocationIn has the following:
    RefObject (inherited)
    Timestamp (inherited, optional)
    Pose (inherited)
    PositionStandardDeviation (inherited, optional)
    OrientationStandardDeviation (inherited, optional).
  A PoseLocationIn indicates that the object is inside the
  RefObject. The notion of 'inside' is vague and might be made
  more precise.")
SubClassOf(:PoseLocationIn :PoseLocation)

# Class: :PoseLocationOn (:PoseLocationOn)

AnnotationAssertion(rdfs:comment :PoseLocationOn "PoseLocationOn is derived from PoseLocation.
  An instance of PoseLocationOn has the following:
    RefObject (inherited)
    Timestamp (inherited, optional)
    Pose (inherited)
    PositionStandardDeviation (inherited, optional)
    OrientationStandardDeviation (inherited, optional).
 
  A PoseLocationOn indicates that the Object is on top of
  the RefObject. The notion of 'on top of' is vague and might be
  made more precise.")
SubClassOf(:PoseLocationOn :PoseLocation)

# Class: :PoseOnlyLocation (:PoseOnlyLocation)

AnnotationAssertion(rdfs:comment :PoseOnlyLocation "PoseOnlyLocation is derived from PoseLocation.
  An instance of PoseOnlyLocation has the following:
    RefObject (inherited)
    Timestamp (inherited, optional)
    Pose (inherited)
    PositionStandardDeviation (inherited,optional)
    OrientationStandardDeviation (inherited, optional)
    Tolerance (optional)
 
  An object located by a PoseOnlyLocation may or may not be
  inside or on top of the reference object of the
  PoseOnlyLocation.")
SubClassOf(:PoseOnlyLocation :PoseLocation)

# Class: :PoseTolerance (:PoseTolerance)

AnnotationAssertion(rdfs:comment :PoseTolerance "PoseTolerance is derived from DataThing. 
  An instance of PoseTolerance has the following:
    Name (inherited, optional)
    XPointTolerance (optional)
    YPointTolerance (optional)
    ZPointTolerance (optional)
    XAxisTolerance (optional)
    ZAxisTolerance (optional).

  The XPointTolerance is the distance along the XAxis in current
  length units within which the controlled point must come from the X
  value of the point given in the pose with which the pose tolerance
  is associated. 

  The YPointTolerance and ZPointTolerance are similar.
  The XAxisTolerance is the angle in current angle units within which
  the XAxis must come from the given XAxis. The ZAxisTolerance is
  similar. All five tolerances must be satisfied at the same instant.")
SubClassOf(:PoseTolerance :DataThing)

# Class: :RelativeLocationIn (:RelativeLocationIn)

AnnotationAssertion(rdfs:comment :RelativeLocationIn "RelativeLocationIn is derived from PhysicalLocation.
  An instance of RelativeLocationIn has the following:
    RefObject (inherited)
    Timestamp (inherited, optional)
    Description.
 
  A RelativeLocationIn indicates that the SolidObject that
  has the RelativeLocation is in the RefObject. The notion of
  'in' is vague and might be made more precise.")
EquivalentClasses(:RelativeLocationIn ObjectIntersectionOf(DataSomeValuesFrom(:hasRelativeLocationIn_Description xsd:string) DataAllValuesFrom(:hasRelativeLocationIn_Description xsd:string)))
SubClassOf(:RelativeLocationIn :PhysicalLocation)

# Class: :RelativeLocationOn (:RelativeLocationOn)

AnnotationAssertion(rdfs:comment :RelativeLocationOn "RelativeLocationOn is derived from PhysicalLocation.
  An instance of RelativeLocationOn has the following:
    RefObject (inherited)
    Timestamp (inherited, optional)
    Description.
 
  A RelativeLocationOn indicates that the SolidObject that
  has the RelativeLocation is on top of the the RefObject. The
  notion of 'on top of' is vague and might be made more precise.")
EquivalentClasses(:RelativeLocationOn ObjectIntersectionOf(DataSomeValuesFrom(:hasRelativeLocationOn_Description xsd:string) DataAllValuesFrom(:hasRelativeLocationOn_Description xsd:string)))
SubClassOf(:RelativeLocationOn :PhysicalLocation)

# Class: :Robot (:Robot)

AnnotationAssertion(rdfs:comment :Robot "Robot is derived from NoSkuObject.
  An instance of Robot has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Weight (inherited, optional)
    EffectorAndGrasp (inherited, optional, multiple)
    Description
    EndEffector (optional)
    MaximumLoadWeight
    WorkVolume (multiple).
 
  The Robot ontology given here might be expanded greatly to include,
  for example, its kinematic description, the values of joint angles,
  arm lengths of variable length arms, gripper actuation (open,
  closed, etc.), ranges, velocities, and accelerations of each joint,
  etc.")
EquivalentClasses(:Robot ObjectIntersectionOf(DataSomeValuesFrom(:hasRobot_Description xsd:string) DataAllValuesFrom(:hasRobot_Description xsd:string)))
SubClassOf(:Robot :NoSkuObject)

# Class: :ShapeDesign (:ShapeDesign)

AnnotationAssertion(rdfs:comment :ShapeDesign "ShapeDesign is derived from DataThing.
  An instance of ShapeDesign has the following:
    Description (optional)
    Marking (optional, multiple).
 
  ShapeDesign is an abstract type from which more specific types
  of shape design are derived. Each ShapeDesign has a coordinate
  system that is expected to be specified explicitly or implicitly. A
  shape defined using coordinate values has an implicit coordinate
  system. A shape may have zero to many markings on it.")
EquivalentClasses(:ShapeDesign ObjectIntersectionOf(DataSomeValuesFrom(:hasShapeDesign_Description xsd:string) DataAllValuesFrom(:hasShapeDesign_Description xsd:string)))
SubClassOf(:ShapeDesign :DataThing)
DisjointUnion(:ShapeDesign :ExternalShape :InternalShape)

# Class: :SkuObject (:SkuObject)

AnnotationAssertion(rdfs:comment :SkuObject "SkuObject is derived from SolidObject.
  An instance of SkuObject has the following:
    PrimaryLocation (inherited)
    SecondaryLocations (inherited, optional, multiple)
    Sku.
 
  A SkuObject is an abstract type from which more specific types
  of solid object are derived. A SkuObject is an instance of a
  stockkeeping unit. The shape and weight of a SkuObject are
  specified by its stockkeeping unit, as are the grippers and their
  grasps that can handle the object.")
EquivalentClasses(:SkuObject ObjectIntersectionOf(ObjectSomeValuesFrom(:hasSkuObject_Sku :StockKeepingUnit) ObjectAllValuesFrom(:hasSkuObject_Sku :StockKeepingUnit)))
SubClassOf(:SkuObject :SolidObject)
DisjointUnion(:SkuObject :LargeContainer :Part :PartsVessel)

# Class: :Slot (:Slot)

AnnotationAssertion(rdfs:comment :Slot "Slot is derived from DataThing.
  An instance of Slot has the following:
    PartRefAndPose
    Part (optional).
 
  A Slot identifies whether or not a particular PartRefAndPose from a
  PartsTrayDesign is occupied in an instance of a PartsTray. The
  PartRefAndPose identifies a PartRefAndPose from the
  Design of the PartsTray. The Part identifies a Part
  that occupies the PartRefAndPose. The Sku of the PartRefAndPose
  should be the Sku of the Part, the PartRefAndPose should be in the
  PartsTrayDesign, and the Part should be in the PartsTray. The
  location described by the Pose of the Part in the PartsTray may
  differ from the location described by the Pose in the
  PartRefAndPose, but will usually be very close to it. If the
  Part is not used for a slot, that means the slot is
  empty.")
EquivalentClasses(:Slot ObjectIntersectionOf(ObjectSomeValuesFrom(:hasSlot_PartRefAndPose :PartRefAndPose) ObjectAllValuesFrom(:hasSlot_PartRefAndPose :PartRefAndPose)))
EquivalentClasses(:Slot ObjectIntersectionOf(DataSomeValuesFrom(:hasSlot_ID xsd:integer) DataAllValuesFrom(:hasSlot_ID xsd:integer)))
EquivalentClasses(:Slot ObjectIntersectionOf(DataSomeValuesFrom(:hasSlot_IsOccupied xsd:boolean) DataAllValuesFrom(:hasSlot_IsOccupied xsd:boolean)))
SubClassOf(:Slot :DataThing)

# Class: :SolidObject (:SolidObject)

AnnotationAssertion(rdfs:comment :SolidObject "An instance of SolidObject has the following:
    PrimaryLocation
    SecondaryLocation (optional, multiple).
 
  SolidObject is an abstract type from which more specific types
  of SolidObject are derived. The secondary locations are required to
  be logically and mathematically consistent with the value of the
  PrimaryLocation so that all locations of a SolidObject describe
  (or are consistent with) a single place in space. No
  SolidObject except the Workstation may be located with respect
  to itself, and all chains of primary location must end at the
  Workstation.")
EquivalentClasses(:SolidObject ObjectIntersectionOf(ObjectSomeValuesFrom(:hasSolidObject_PrimaryLocation :PhysicalLocation) ObjectAllValuesFrom(:hasSolidObject_PrimaryLocation :PhysicalLocation)))
DisjointUnion(:SolidObject :NoSkuObject :SkuObject)

# Class: :StockKeepingUnit (:StockKeepingUnit)

AnnotationAssertion(rdfs:comment :StockKeepingUnit "StockKeepingUnit is derived from DataThing.
  An instance of StockKeepingUnit has the following:
    Description
    InternalShape (optional)
    ExternalShape (optional)
    Weight
    EffectorAndGrasp (optional, multiple).
 
  A StockKeepingUnit is an object type description. SKU is
  an abbreviation for Stock Keeping Unit. One or both of
  InternalShape and ExternalShape must be given. The shapes are
  not required to represent the same shape, but they should not
  be inconsistent. In particular, they must use the same
  coordinate system. Each EffectorAndGrasp identifies an
  instance of EndEffector that can handle the SKU and,
  optionally, the pose or poses that end effector should use.")
EquivalentClasses(:StockKeepingUnit ObjectIntersectionOf(DataSomeValuesFrom(:hasStockKeepingUnit_Description xsd:string) DataAllValuesFrom(:hasStockKeepingUnit_Description xsd:string)))
SubClassOf(:StockKeepingUnit :DataThing)

# Class: :ThreeFingerGrasp (:ThreeFingerGrasp)

AnnotationAssertion(rdfs:comment :ThreeFingerGrasp "ThreeFingerGrasp is derived from EndEffectorGrasp.
  An instance of ThreeFingerGrasp has the following:
    ThreeFingerGripper
    GraspPose1 (optional)
    GraspPose2 (optional)
    GraspPose3 (optional)
    MaxForce (optional)
    MinForce (optional).
  The ThreeFingerGripperName identifies a three-finger gripper
  that can handle an object of a given shape. The GraspPose
  elements are poses from which an object of a given
  SKU can be grasped by a three finger gripper. The
  poses are relative to the coordinate system of the
  SKU's shape (so that the value of the RefObjectName of
  each pose is irrelevant, as long as it is the name of a
  SolidObject). The Point in each pose is a point at which a
  finger of the gripper should make contact with the shape. The
  axes of each pose may be used to indicate a direction for
  aligning each finger. The ZAxis is usually normal to the
  object having the shape and pointing away from the object. The
  GraspPoses should not use the optional Timestamp.
  The MaxForce is the maximum force that each finger may apply.
  The MinForce is the minimum force that each finger must apply in
  order to lift the object. Force is measured in Newtons.")
EquivalentClasses(:ThreeFingerGrasp ObjectIntersectionOf(ObjectSomeValuesFrom(:hasThreeFingerGrasp_ThreeFingerGripper :GripperThreeFinger) ObjectAllValuesFrom(:hasThreeFingerGrasp_ThreeFingerGripper :GripperThreeFinger)))
SubClassOf(:ThreeFingerGrasp :EndEffectorGrasp)

# Class: :TwoJawsGrasp (:TwoJawsGrasp)

AnnotationAssertion(rdfs:comment :TwoJawsGrasp "TwoJawsGrasp is derived from EndEffectorGrasp.
  An instance of TwoJawsGrasp has the following:
    TwoJawsGripper
    GraspPose1 (optional)
    GraspPose2 (optional)
    MaxForce (optional)
    MinForce (optional).
  The TwoJawsGripperName identifies a two-jaws gripper that can
  handle an object of a given shape. The GraspPose elements are
  poses from which an object of a given SKU can be grasped by a
  two-jaws gripper. The poses are relative to the coordinate
  system of the SKU's shape (so that the value of the
  RefObjectName of each pose is irrelevant, as long as it is the
  name of a SolidObject). The Point in each pose is a point at
  which a jaw of the gripper should make contact with the shape.
  The axes of the poses may be used to indicate directions for
  aligning the jaws. The ZAxis is usually normal to the object
  having the shape and pointing away from the object. The
  GraspPoses should not use the optional Timestamp. The MaxForce
  is the maximum force that each jaw may apply. The MinForce is
  the minimum force that each jaw must apply in order to lift
  the object. Force is measured in Newtons.")
EquivalentClasses(:TwoJawsGrasp ObjectIntersectionOf(ObjectSomeValuesFrom(:hasTwoJawsGrasp_TwoJawsGripper :GripperTwoJaws) ObjectAllValuesFrom(:hasTwoJawsGrasp_TwoJawsGripper :GripperTwoJaws)))
SubClassOf(:TwoJawsGrasp :EndEffectorGrasp)

# Class: :VacuumEffector (:VacuumEffector)

AnnotationAssertion(rdfs:comment :VacuumEffector "VacuumEffector is derived from EndEffector.
  An instance of VacuumEffector has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Weight (inherited, optional)
    EffectorAndGrasp (inherited, optional, multiple)
    Description (inherited)
    MaximumLoadWeight (inherited)
    CupDiameter
    Length.
 
  VacuumEffector is an abstract type from which more specific
  types of VacuumEffector are derived. A VacuumEffector holds
  an object by putting a cup or cups against the object and applying
  a vacuum.")
SubClassOf(:VacuumEffector :EndEffector)
DisjointUnion(:VacuumEffector :VacuumEffectorMultiCup :VacuumEffectorSingleCup)

# Class: :VacuumEffectorMultiCup (:VacuumEffectorMultiCup)

AnnotationAssertion(rdfs:comment :VacuumEffectorMultiCup "VacuumEffectorMultiCup is derived from VacuumEffector. An
  instance of VacuumEffectorMultiCup has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Weight (inherited, optional)
    EffectorAndGrasp (inherited, optional, multiple)
    Description (inherited)
    MaximumLoadWeight (inherited)
    CupDiameter (inherited)
    Length (inherited)
    ArrayNumber
    ArrayRadius.
 
  The ArrayNumber is the number of cups, which must be at least 2.
  The cups are arranged in a circular array spaced evenly apart. The
  center of the wide end of one cup is on the X-axis of the
  coordinate system of the VacuumEffectorMultiCup. The center of
  the circular array is at the origin of the coordinate system. The
  axis of the array circle is the Z axis of the coordinate system,
  and the length of the VacuumEffector is measured along that
  axis. The wide ends of the cups lie on the XY plane of the
  coordinate system.
 
  Note that a square array can be represented easily as circular
  array.")
EquivalentClasses(:VacuumEffectorMultiCup ObjectIntersectionOf(DataSomeValuesFrom(:hasVacuumEffectorMultiCup_ArrayNumber xsd:positiveInteger) DataAllValuesFrom(:hasVacuumEffectorMultiCup_ArrayNumber xsd:positiveInteger)))
SubClassOf(:VacuumEffectorMultiCup :VacuumEffector)

# Class: :VacuumEffectorSingleCup (:VacuumEffectorSingleCup)

AnnotationAssertion(rdfs:comment :VacuumEffectorSingleCup "VacuumEffectorSingleCup is derived from VacuumEffector. An
  instance of VacuumEffectorSingleCup has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Weight (inherited, optional)
    EffectorAndGrasp (inherited, optional, multiple)
    Description (inherited)
    MaximumLoadWeight (inherited)
    CupDiameter (inherited)
    Length (inherited).
  A VacuumEffectorSingleCup has one cup. The center of the wide
  end of the cup (which is a circle) is at the origin of the
  coordinate system of the VacuumEffectorSingleCup.  The Z axis
  of the coordinate system is the axis of that circle, and the length
  of the VacuumEffector is measured along that axis.")
SubClassOf(:VacuumEffectorSingleCup :VacuumEffector)

# Class: :VacuumEffectorSingleGrasp (:VacuumEffectorSingleGrasp)

AnnotationAssertion(rdfs:comment :VacuumEffectorSingleGrasp "VacuumEffectorSingleGrasp is derived from EndEffectorGrasp.
  An instance of VacuumEffectorSingleGrasp has the following
  elements:
    VacuumEffectorSingle
    GraspPose (optional).
  The VacuumEffectorSingleName identifies a single cup vaccum
  effector that can handle an object of a given shape. The GraspPose
  element is a pose from which an object of a given ShapeDesign
  can be grasped by a single cup vacuum effector. The pose is
  relative to the coordinate system of the ShapeDesign (so that
  the value of the RefObjectName of the pose is irrelevant, as long
  as it is the name of a SolidObject). The Point in the pose is the
  point at which a gripper should make contact with the shape. The
  ZAxis of the pose may be used to indicate a direction for aligning
  the ZAxis of the gripper (parallel or antiparallel) and is usually
  normal to the object having the shape and pointing away from the
  object. The GraspPose should not use the optional Timestamp.")
EquivalentClasses(:VacuumEffectorSingleGrasp ObjectIntersectionOf(ObjectSomeValuesFrom(:hasVacuumEffectorSingleGrasp_VacuumEffectorSingle :VacuumEffectorSingleCup) ObjectAllValuesFrom(:hasVacuumEffectorSingleGrasp_VacuumEffectorSingle :VacuumEffectorSingleCup)))
SubClassOf(:VacuumEffectorSingleGrasp :EndEffectorGrasp)

# Class: :Vector (:Vector)

AnnotationAssertion(rdfs:comment :Vector "Vector is derived from DataThing.
  An instance of Vector has the following:
    I
    J
    K.
 
  I, J, and K represent the usual i, j, and k components of a 3D
  vector.")
EquivalentClasses(:Vector ObjectIntersectionOf(DataSomeValuesFrom(:hasVector_I xsd:decimal) DataAllValuesFrom(:hasVector_I xsd:decimal)))
EquivalentClasses(:Vector ObjectIntersectionOf(DataSomeValuesFrom(:hasVector_J xsd:decimal) DataAllValuesFrom(:hasVector_J xsd:decimal)))
EquivalentClasses(:Vector ObjectIntersectionOf(DataSomeValuesFrom(:hasVector_K xsd:decimal) DataAllValuesFrom(:hasVector_K xsd:decimal)))
SubClassOf(:Vector :DataThing)

# Class: :WorkTable (:WorkTable)

AnnotationAssertion(rdfs:comment :WorkTable "WorkTable is derived from NoSkuObject.
  An instance of WorkTable has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Weight (inherited, optional)
    EffectorAndGrasp (inherited, optional, multiple)
    ObjectOnTable (optional, multiple).
 
  Each ObjectOnTable is a SolidObject located with respect to the
  WorkTable. The reference object of each ObjectOnTable should be
  the WorkTable. Typically, those objects will be on top of the
  WorkTable. Typically, the shape of a WorkTable will be a
  BoxyShape, so that the table has Length, Width, and Height.")
SubClassOf(:WorkTable :NoSkuObject)


############################
#   Named Individuals
############################

# Individual: :design_gasket_tray (:design_gasket_tray)

ClassAssertion(:PartsTrayDesign :design_gasket_tray)
ObjectPropertyAssertion(:hasPartsTrayDesign_VesselSku :design_gasket_tray :sku_gasket_vessel)

# Individual: :design_gear_tray (:design_gear_tray)

ClassAssertion(:PartsTrayDesign :design_gear_tray)
ObjectPropertyAssertion(:hasPartsTrayDesign_VesselSku :design_gear_tray :sku_gear_vessel)

# Individual: :design_kit_tray (:design_kit_tray)

ClassAssertion(:PartsTrayDesign :design_kit_tray)
ObjectPropertyAssertion(:hasPartsTrayDesign_VesselSku :design_kit_tray :sku_kit_vessel)

# Individual: :design_piston_rod_tray (:design_piston_rod_tray)

ClassAssertion(:PartsTrayDesign :design_piston_rod_tray)
ObjectPropertyAssertion(:hasPartsTrayDesign_VesselSku :design_piston_rod_tray :sku_piston_rod_vessel)

# Individual: :gasket_part_shape (:gasket_part_shape)

ClassAssertion(:ExternalShape :gasket_part_shape)
DataPropertyAssertion(:hasExternalShape_ModelFileName :gasket_part_shape "gasket_part"^^xsd:string)
DataPropertyAssertion(:hasExternalShape_ModelFormatName :gasket_part_shape "dae"^^xsd:string)
DataPropertyAssertion(:hasShapeDesign_Description :gasket_part_shape "Shape of gasket parts"^^xsd:string)

# Individual: :gasket_tray (:gasket_tray)

ClassAssertion(:PartsTray :gasket_tray)
ObjectPropertyAssertion(:hasPartsTray_Design :gasket_tray :design_gasket_tray)
ObjectPropertyAssertion(:hasSkuObject_Sku :gasket_tray :sku_gasket_vessel)
ObjectPropertyAssertion(:hasSolidObject_PrimaryLocation :gasket_tray :gasket_tray_location)
DataPropertyAssertion(:hasPartsTray_Complete :gasket_tray "true"^^xsd:boolean)
DataPropertyAssertion(:hasPartsVessel_SerialNumber :gasket_tray "GasketTray"^^xsd:NMTOKEN)

# Individual: :gasket_tray_location (:gasket_tray_location)

ClassAssertion(:PoseLocationOn :gasket_tray_location)
ObjectPropertyAssertion(:hasPhysicalLocation_RefObject :gasket_tray_location :optical_table)
ObjectPropertyAssertion(:hasPoseLocation_Pose :gasket_tray_location :gasket_tray_pose)

# Individual: :gasket_tray_point (:gasket_tray_point)

ClassAssertion(:Point :gasket_tray_point)
DataPropertyAssertion(:hasPoint_X :gasket_tray_point "0.0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :gasket_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :gasket_tray_point "0.0"^^xsd:decimal)

# Individual: :gasket_tray_pose (:gasket_tray_pose)

ClassAssertion(:Pose :gasket_tray_pose)
ObjectPropertyAssertion(:hasPose_Point :gasket_tray_pose :gasket_tray_point)
ObjectPropertyAssertion(:hasPose_XAxis :gasket_tray_pose :gasket_tray_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :gasket_tray_pose :gasket_tray_z_axis)

# Individual: :gasket_tray_shape (:gasket_tray_shape)

ClassAssertion(:BoxyShape :gasket_tray_shape)
DataPropertyAssertion(:hasBoxyShape_HasTop :gasket_tray_shape "false"^^xsd:boolean)
DataPropertyAssertion(:hasBoxyShape_Height :gasket_tray_shape "1.0"^^xsd:decimal)
DataPropertyAssertion(:hasBoxyShape_Length :gasket_tray_shape "1.0"^^xsd:decimal)
DataPropertyAssertion(:hasBoxyShape_Width :gasket_tray_shape "1.0"^^xsd:decimal)
DataPropertyAssertion(:hasShapeDesign_Description :gasket_tray_shape "Shape for trays that hold gasket parts"^^xsd:string)

# Individual: :gasket_tray_slot_1 (:gasket_tray_slot_1)

ClassAssertion(:Slot :gasket_tray_slot_1)
ObjectPropertyAssertion(:hasSlot_Part :gasket_tray_slot_1 :part_gasket_1)
ObjectPropertyAssertion(:hasSlot_PartRefAndPose :gasket_tray_slot_1 :prap_gasket_1)
DataPropertyAssertion(:hasSlot_ID :gasket_tray_slot_1 "1"^^xsd:integer)
DataPropertyAssertion(:hasSlot_IsOccupied :gasket_tray_slot_1 "true"^^xsd:boolean)

# Individual: :gasket_tray_slot_2 (:gasket_tray_slot_2)

ClassAssertion(:Slot :gasket_tray_slot_2)
ObjectPropertyAssertion(:hasSlot_Part :gasket_tray_slot_2 :part_gasket_2)
ObjectPropertyAssertion(:hasSlot_PartRefAndPose :gasket_tray_slot_2 :prap_gasket_2)
DataPropertyAssertion(:hasSlot_ID :gasket_tray_slot_2 "2"^^xsd:integer)
DataPropertyAssertion(:hasSlot_IsOccupied :gasket_tray_slot_2 "true"^^xsd:boolean)

# Individual: :gasket_tray_slot_3 (:gasket_tray_slot_3)

ClassAssertion(:Slot :gasket_tray_slot_3)
ObjectPropertyAssertion(:hasSlot_Part :gasket_tray_slot_3 :part_gasket_3)
ObjectPropertyAssertion(:hasSlot_PartRefAndPose :gasket_tray_slot_3 :prap_gasket_3)
DataPropertyAssertion(:hasSlot_ID :gasket_tray_slot_3 "3"^^xsd:integer)
DataPropertyAssertion(:hasSlot_IsOccupied :gasket_tray_slot_3 "true"^^xsd:boolean)

# Individual: :gasket_tray_slot_4 (:gasket_tray_slot_4)

ClassAssertion(:Slot :gasket_tray_slot_4)
ObjectPropertyAssertion(:hasSlot_Part :gasket_tray_slot_4 :part_gasket_4)
ObjectPropertyAssertion(:hasSlot_PartRefAndPose :gasket_tray_slot_4 :prap_gasket_4)
DataPropertyAssertion(:hasSlot_ID :gasket_tray_slot_4 "4"^^xsd:integer)
DataPropertyAssertion(:hasSlot_IsOccupied :gasket_tray_slot_4 "true"^^xsd:boolean)

# Individual: :gasket_tray_x_axis (:gasket_tray_x_axis)

ClassAssertion(:Vector :gasket_tray_x_axis)
DataPropertyAssertion(:hasVector_I :gasket_tray_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :gasket_tray_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :gasket_tray_x_axis "0"^^xsd:decimal)

# Individual: :gasket_tray_z_axis (:gasket_tray_z_axis)

ClassAssertion(:Vector :gasket_tray_z_axis)
DataPropertyAssertion(:hasVector_I :gasket_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :gasket_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :gasket_tray_z_axis "1"^^xsd:decimal)

# Individual: :gear_part_shape (:gear_part_shape)

ClassAssertion(:CylindricalShape :gear_part_shape)
DataPropertyAssertion(:hasCylindricalShape_Diameter :gear_part_shape "3"^^xsd:decimal)
DataPropertyAssertion(:hasCylindricalShape_HasTop :gear_part_shape "true"^^xsd:boolean)
DataPropertyAssertion(:hasCylindricalShape_Height :gear_part_shape "1"^^xsd:decimal)
DataPropertyAssertion(:hasShapeDesign_Description :gear_part_shape "Shape of gear parts"^^xsd:string)

# Individual: :gear_tray (:gear_tray)

ClassAssertion(:PartsTray :gear_tray)
ObjectPropertyAssertion(:hasPartsTray_Design :gear_tray :design_gear_tray)
ObjectPropertyAssertion(:hasSkuObject_Sku :gear_tray :sku_gear_vessel)
ObjectPropertyAssertion(:hasSolidObject_PrimaryLocation :gear_tray :gear_tray_location)
DataPropertyAssertion(:hasPartsTray_Complete :gear_tray "true"^^xsd:boolean)
DataPropertyAssertion(:hasPartsVessel_SerialNumber :gear_tray "GearTray"^^xsd:NMTOKEN)

# Individual: :gear_tray_location (:gear_tray_location)

ClassAssertion(:PoseLocationOn :gear_tray_location)
ObjectPropertyAssertion(:hasPhysicalLocation_RefObject :gear_tray_location :optical_table)
ObjectPropertyAssertion(:hasPoseLocation_Pose :gear_tray_location :gear_tray_pose)

# Individual: :gear_tray_point (:gear_tray_point)

ClassAssertion(:Point :gear_tray_point)
DataPropertyAssertion(:hasPoint_X :gear_tray_point "0.0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :gear_tray_point "0.0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :gear_tray_point "0.0"^^xsd:decimal)

# Individual: :gear_tray_pose (:gear_tray_pose)

ClassAssertion(:Pose :gear_tray_pose)
ObjectPropertyAssertion(:hasPose_Point :gear_tray_pose :gear_tray_point)
ObjectPropertyAssertion(:hasPose_XAxis :gear_tray_pose :gear_tray_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :gear_tray_pose :gear_tray_z_axis)

# Individual: :gear_tray_shape (:gear_tray_shape)

ClassAssertion(:BoxyShape :gear_tray_shape)
DataPropertyAssertion(:hasBoxyShape_HasTop :gear_tray_shape "false"^^xsd:boolean)
DataPropertyAssertion(:hasBoxyShape_Height :gear_tray_shape "1.0"^^xsd:decimal)
DataPropertyAssertion(:hasBoxyShape_Length :gear_tray_shape "1.0"^^xsd:decimal)
DataPropertyAssertion(:hasBoxyShape_Width :gear_tray_shape "1.0"^^xsd:decimal)
DataPropertyAssertion(:hasShapeDesign_Description :gear_tray_shape "Shape for trays that hold gear parts"^^xsd:string)

# Individual: :gear_tray_slot_1 (:gear_tray_slot_1)

ClassAssertion(:Slot :gear_tray_slot_1)
ObjectPropertyAssertion(:hasSlot_Part :gear_tray_slot_1 :part_gear_1)
ObjectPropertyAssertion(:hasSlot_PartRefAndPose :gear_tray_slot_1 :prap_gear_1)
DataPropertyAssertion(:hasSlot_ID :gear_tray_slot_1 "1"^^xsd:integer)
DataPropertyAssertion(:hasSlot_IsOccupied :gear_tray_slot_1 "true"^^xsd:boolean)

# Individual: :gear_tray_slot_2 (:gear_tray_slot_2)

ClassAssertion(:Slot :gear_tray_slot_2)
ObjectPropertyAssertion(:hasSlot_Part :gear_tray_slot_2 :part_gear_2)
ObjectPropertyAssertion(:hasSlot_PartRefAndPose :gear_tray_slot_2 :prap_gear_2)
DataPropertyAssertion(:hasSlot_ID :gear_tray_slot_2 "2"^^xsd:integer)
DataPropertyAssertion(:hasSlot_IsOccupied :gear_tray_slot_2 "true"^^xsd:boolean)

# Individual: :gear_tray_slot_3 (:gear_tray_slot_3)

ClassAssertion(:Slot :gear_tray_slot_3)
ObjectPropertyAssertion(:hasSlot_Part :gear_tray_slot_3 :part_gear_3)
ObjectPropertyAssertion(:hasSlot_PartRefAndPose :gear_tray_slot_3 :prap_gear_3)
DataPropertyAssertion(:hasSlot_ID :gear_tray_slot_3 "3"^^xsd:integer)
DataPropertyAssertion(:hasSlot_IsOccupied :gear_tray_slot_3 "true"^^xsd:boolean)

# Individual: :gear_tray_slot_4 (:gear_tray_slot_4)

ClassAssertion(:Slot :gear_tray_slot_4)
ObjectPropertyAssertion(:hasSlot_Part :gear_tray_slot_4 :part_gear_4)
ObjectPropertyAssertion(:hasSlot_PartRefAndPose :gear_tray_slot_4 :prap_gear_4)
DataPropertyAssertion(:hasSlot_ID :gear_tray_slot_4 "4"^^xsd:integer)
DataPropertyAssertion(:hasSlot_IsOccupied :gear_tray_slot_4 "true"^^xsd:boolean)

# Individual: :gear_tray_x_axis (:gear_tray_x_axis)

ClassAssertion(:Vector :gear_tray_x_axis)
DataPropertyAssertion(:hasVector_I :gear_tray_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :gear_tray_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :gear_tray_x_axis "0"^^xsd:decimal)

# Individual: :gear_tray_z_axis (:gear_tray_z_axis)

ClassAssertion(:Vector :gear_tray_z_axis)
DataPropertyAssertion(:hasVector_I :gear_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :gear_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :gear_tray_z_axis "1"^^xsd:decimal)

# Individual: :kit_tray (:kit_tray)

ClassAssertion(:PartsTray :kit_tray)
ObjectPropertyAssertion(:hasPartsTray_Design :kit_tray :design_kit_tray)
ObjectPropertyAssertion(:hasSkuObject_Sku :kit_tray :sku_kit_vessel)
ObjectPropertyAssertion(:hasSolidObject_PrimaryLocation :kit_tray :kit_tray_location)
DataPropertyAssertion(:hasPartsTray_Complete :kit_tray "false"^^xsd:boolean)
DataPropertyAssertion(:hasPartsVessel_SerialNumber :kit_tray "KitTray"^^xsd:NMTOKEN)

# Individual: :kit_tray_location (:kit_tray_location)

ClassAssertion(:PoseLocationOn :kit_tray_location)
ObjectPropertyAssertion(:hasPhysicalLocation_RefObject :kit_tray_location :optical_table)
ObjectPropertyAssertion(:hasPoseLocation_Pose :kit_tray_location :kit_tray_pose)

# Individual: :kit_tray_point (:kit_tray_point)

ClassAssertion(:Point :kit_tray_point)
DataPropertyAssertion(:hasPoint_X :kit_tray_point "0.0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :kit_tray_point "0.0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :kit_tray_point "0.0"^^xsd:decimal)

# Individual: :kit_tray_pose (:kit_tray_pose)

ClassAssertion(:Pose :kit_tray_pose)
ObjectPropertyAssertion(:hasPose_Point :kit_tray_pose :kit_tray_point)
ObjectPropertyAssertion(:hasPose_XAxis :kit_tray_pose :kit_tray_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :kit_tray_pose :kit_tray_z_axis)

# Individual: :kit_tray_shape (:kit_tray_shape)

ClassAssertion(:BoxyShape :kit_tray_shape)
DataPropertyAssertion(:hasBoxyShape_HasTop :kit_tray_shape "false"^^xsd:boolean)
DataPropertyAssertion(:hasBoxyShape_Height :kit_tray_shape "1.0"^^xsd:decimal)
DataPropertyAssertion(:hasBoxyShape_Length :kit_tray_shape "1.0"^^xsd:decimal)
DataPropertyAssertion(:hasBoxyShape_Width :kit_tray_shape "1.0"^^xsd:decimal)
DataPropertyAssertion(:hasShapeDesign_Description :kit_tray_shape "Shape of tray for kits"^^xsd:string)

# Individual: :kit_tray_x_axis (:kit_tray_x_axis)

ClassAssertion(:Vector :kit_tray_x_axis)
DataPropertyAssertion(:hasVector_I :kit_tray_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :kit_tray_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :kit_tray_x_axis "0"^^xsd:decimal)

# Individual: :kit_tray_z_axis (:kit_tray_z_axis)

ClassAssertion(:Vector :kit_tray_z_axis)
DataPropertyAssertion(:hasVector_I :kit_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :kit_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :kit_tray_z_axis "1"^^xsd:decimal)

# Individual: :motoman_box_volume_1 (:motoman_box_volume_1)

ClassAssertion(:BoxVolume :motoman_box_volume_1)
ObjectPropertyAssertion(:hasBoxVolume_MaximumPoint :motoman_box_volume_1 :motoman_max_point)
ObjectPropertyAssertion(:hasBoxVolume_MinimumPoint :motoman_box_volume_1 :motoman_min_point)

# Individual: :motoman_max_point (:motoman_max_point)

ClassAssertion(:Point :motoman_max_point)
DataPropertyAssertion(:hasPoint_X :motoman_max_point "1.0414"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :motoman_max_point "0.2032"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :motoman_max_point "0.0"^^xsd:decimal)

# Individual: :motoman_min_point (:motoman_min_point)

ClassAssertion(:Point :motoman_min_point)
DataPropertyAssertion(:hasPoint_X :motoman_min_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :motoman_min_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :motoman_min_point "0"^^xsd:decimal)

# Individual: :motoman_workstation (:motoman_workstation)

ClassAssertion(:KittingWorkstation :motoman_workstation)
ObjectPropertyAssertion(:hasSolidObject_PrimaryLocation :motoman_workstation :relative_location_in_1)
DataPropertyAssertion(:hasKittingWorkstation_AngleUnit :motoman_workstation "degree"^^xsd:string)
DataPropertyAssertion(:hasKittingWorkstation_LengthUnit :motoman_workstation "meter"^^xsd:string)
DataPropertyAssertion(:hasKittingWorkstation_WeightUnit :motoman_workstation "kilogram"^^xsd:string)

# Individual: :optical_table (:optical_table)

ClassAssertion(:WorkTable :optical_table)
ObjectPropertyAssertion(:hasSolidObject_PrimaryLocation :optical_table :optical_table_location)

# Individual: :optical_table_location (:optical_table_location)

ClassAssertion(:PoseOnlyLocation :optical_table_location)
ObjectPropertyAssertion(:hasPhysicalLocation_RefObject :optical_table_location :optical_table)
ObjectPropertyAssertion(:hasPoseLocation_Pose :optical_table_location :optical_table_pose)

# Individual: :optical_table_point (:optical_table_point)

ClassAssertion(:Point :optical_table_point)
DataPropertyAssertion(:hasPoint_X :optical_table_point "0.0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :optical_table_point "0.0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :optical_table_point "0.0"^^xsd:decimal)

# Individual: :optical_table_pose (:optical_table_pose)

ClassAssertion(:Pose :optical_table_pose)
ObjectPropertyAssertion(:hasPose_Point :optical_table_pose :optical_table_point)
ObjectPropertyAssertion(:hasPose_XAxis :optical_table_pose :optical_table_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :optical_table_pose :optical_table_z_axis)

# Individual: :optical_table_x_axis (:optical_table_x_axis)

ClassAssertion(:Vector :optical_table_x_axis)
DataPropertyAssertion(:hasVector_I :optical_table_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :optical_table_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :optical_table_x_axis "0"^^xsd:decimal)

# Individual: :optical_table_z_axis (:optical_table_z_axis)

ClassAssertion(:Vector :optical_table_z_axis)
DataPropertyAssertion(:hasVector_I :optical_table_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :optical_table_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :optical_table_z_axis "1"^^xsd:decimal)

# Individual: :part_gasket_1 (:part_gasket_1)

ClassAssertion(:Part :part_gasket_1)
ObjectPropertyAssertion(:hasSkuObject_Sku :part_gasket_1 :sku_gasket_part)
ObjectPropertyAssertion(:hasSolidObject_PrimaryLocation :part_gasket_1 :part_gasket_1_location)
DataPropertyAssertion(:hasPart_SerialNumber :part_gasket_1 "1"^^xsd:NMTOKEN)

# Individual: :part_gasket_1_in_tray_point (:part_gasket_1_in_tray_point)

ClassAssertion(:Point :part_gasket_1_in_tray_point)
DataPropertyAssertion(:hasPoint_X :part_gasket_1_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_gasket_1_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_gasket_1_in_tray_point "0"^^xsd:decimal)

# Individual: :part_gasket_1_in_tray_pose (:part_gasket_1_in_tray_pose)

ClassAssertion(:Pose :part_gasket_1_in_tray_pose)
ObjectPropertyAssertion(:hasPose_Point :part_gasket_1_in_tray_pose :part_gasket_1_in_tray_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_gasket_1_in_tray_pose :part_gasket_1_in_tray_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_gasket_1_in_tray_pose :part_gasket_1_in_tray_z_axis)

# Individual: :part_gasket_1_in_tray_x_axis (:part_gasket_1_in_tray_x_axis)

ClassAssertion(:Vector :part_gasket_1_in_tray_x_axis)
DataPropertyAssertion(:hasVector_I :part_gasket_1_in_tray_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gasket_1_in_tray_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gasket_1_in_tray_x_axis "0"^^xsd:decimal)

# Individual: :part_gasket_1_in_tray_z_axis (:part_gasket_1_in_tray_z_axis)

ClassAssertion(:Vector :part_gasket_1_in_tray_z_axis)
DataPropertyAssertion(:hasVector_I :part_gasket_1_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gasket_1_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gasket_1_in_tray_z_axis "1"^^xsd:decimal)

# Individual: :part_gasket_1_location (:part_gasket_1_location)

ClassAssertion(:PoseLocationIn :part_gasket_1_location)
ObjectPropertyAssertion(:hasPhysicalLocation_RefObject :part_gasket_1_location :motoman_workstation)
ObjectPropertyAssertion(:hasPoseLocation_Pose :part_gasket_1_location :part_gasket_1_pose)

# Individual: :part_gasket_1_point (:part_gasket_1_point)

ClassAssertion(:Point :part_gasket_1_point)
DataPropertyAssertion(:hasPoint_X :part_gasket_1_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_gasket_1_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_gasket_1_point "0"^^xsd:decimal)

# Individual: :part_gasket_1_pose (:part_gasket_1_pose)

ClassAssertion(:Pose :part_gasket_1_pose)
ObjectPropertyAssertion(:hasPose_Point :part_gasket_1_pose :part_gasket_1_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_gasket_1_pose :part_gasket_1_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_gasket_1_pose :part_gasket_1_z_axis)

# Individual: :part_gasket_1_x_axis (:part_gasket_1_x_axis)

ClassAssertion(:Vector :part_gasket_1_x_axis)
DataPropertyAssertion(:hasVector_I :part_gasket_1_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gasket_1_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gasket_1_x_axis "0"^^xsd:decimal)

# Individual: :part_gasket_1_z_axis (:part_gasket_1_z_axis)

ClassAssertion(:Vector :part_gasket_1_z_axis)
DataPropertyAssertion(:hasVector_I :part_gasket_1_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gasket_1_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gasket_1_z_axis "1"^^xsd:decimal)

# Individual: :part_gasket_2 (:part_gasket_2)

ClassAssertion(:Part :part_gasket_2)
ObjectPropertyAssertion(:hasSkuObject_Sku :part_gasket_2 :sku_gasket_part)
ObjectPropertyAssertion(:hasSolidObject_PrimaryLocation :part_gasket_2 :part_gasket_2_location)
DataPropertyAssertion(:hasPart_SerialNumber :part_gasket_2 "2"^^xsd:NMTOKEN)

# Individual: :part_gasket_2_in_tray_point (:part_gasket_2_in_tray_point)

ClassAssertion(:Point :part_gasket_2_in_tray_point)
DataPropertyAssertion(:hasPoint_X :part_gasket_2_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_gasket_2_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_gasket_2_in_tray_point "0"^^xsd:decimal)

# Individual: :part_gasket_2_in_tray_pose (:part_gasket_2_in_tray_pose)

ClassAssertion(:Pose :part_gasket_2_in_tray_pose)
ObjectPropertyAssertion(:hasPose_Point :part_gasket_2_in_tray_pose :part_gasket_2_in_tray_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_gasket_2_in_tray_pose :part_gasket_2_in_tray_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_gasket_2_in_tray_pose :part_gasket_2_in_tray_z_axis)

# Individual: :part_gasket_2_in_tray_x_axis (:part_gasket_2_in_tray_x_axis)

ClassAssertion(:Vector :part_gasket_2_in_tray_x_axis)
DataPropertyAssertion(:hasVector_I :part_gasket_2_in_tray_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gasket_2_in_tray_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gasket_2_in_tray_x_axis "0"^^xsd:decimal)

# Individual: :part_gasket_2_in_tray_z_axis (:part_gasket_2_in_tray_z_axis)

ClassAssertion(:Vector :part_gasket_2_in_tray_z_axis)
DataPropertyAssertion(:hasVector_I :part_gasket_2_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gasket_2_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gasket_2_in_tray_z_axis "1"^^xsd:decimal)

# Individual: :part_gasket_2_location (:part_gasket_2_location)

ClassAssertion(:PoseLocationIn :part_gasket_2_location)
ObjectPropertyAssertion(:hasPhysicalLocation_RefObject :part_gasket_2_location :motoman_workstation)
ObjectPropertyAssertion(:hasPoseLocation_Pose :part_gasket_2_location :part_gasket_2_pose)

# Individual: :part_gasket_2_point (:part_gasket_2_point)

ClassAssertion(:Point :part_gasket_2_point)
DataPropertyAssertion(:hasPoint_X :part_gasket_2_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_gasket_2_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_gasket_2_point "0"^^xsd:decimal)

# Individual: :part_gasket_2_pose (:part_gasket_2_pose)

ClassAssertion(:Pose :part_gasket_2_pose)
ObjectPropertyAssertion(:hasPose_Point :part_gasket_2_pose :part_gasket_2_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_gasket_2_pose :part_gasket_2_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_gasket_2_pose :part_gasket_2_z_axis)

# Individual: :part_gasket_2_x_axis (:part_gasket_2_x_axis)

ClassAssertion(:Vector :part_gasket_2_x_axis)
DataPropertyAssertion(:hasVector_I :part_gasket_2_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gasket_2_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gasket_2_x_axis "0"^^xsd:decimal)

# Individual: :part_gasket_2_z_axis (:part_gasket_2_z_axis)

ClassAssertion(:Vector :part_gasket_2_z_axis)
DataPropertyAssertion(:hasVector_I :part_gasket_2_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gasket_2_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gasket_2_z_axis "1"^^xsd:decimal)

# Individual: :part_gasket_3 (:part_gasket_3)

ClassAssertion(:Part :part_gasket_3)
ObjectPropertyAssertion(:hasSkuObject_Sku :part_gasket_3 :sku_gasket_part)
ObjectPropertyAssertion(:hasSolidObject_PrimaryLocation :part_gasket_3 :part_gasket_3_location)
DataPropertyAssertion(:hasPart_SerialNumber :part_gasket_3 "3"^^xsd:NMTOKEN)

# Individual: :part_gasket_3_in_tray_point (:part_gasket_3_in_tray_point)

ClassAssertion(:Point :part_gasket_3_in_tray_point)
DataPropertyAssertion(:hasPoint_X :part_gasket_3_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_gasket_3_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_gasket_3_in_tray_point "0"^^xsd:decimal)

# Individual: :part_gasket_3_in_tray_pose (:part_gasket_3_in_tray_pose)

ClassAssertion(:Pose :part_gasket_3_in_tray_pose)
ObjectPropertyAssertion(:hasPose_Point :part_gasket_3_in_tray_pose :part_gasket_3_in_tray_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_gasket_3_in_tray_pose :part_gasket_3_in_tray_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_gasket_3_in_tray_pose :part_gasket_3_in_tray_z_axis)

# Individual: :part_gasket_3_in_tray_x_axis (:part_gasket_3_in_tray_x_axis)

ClassAssertion(:Vector :part_gasket_3_in_tray_x_axis)
DataPropertyAssertion(:hasVector_I :part_gasket_3_in_tray_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gasket_3_in_tray_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gasket_3_in_tray_x_axis "0"^^xsd:decimal)

# Individual: :part_gasket_3_in_tray_z_axis (:part_gasket_3_in_tray_z_axis)

ClassAssertion(:Vector :part_gasket_3_in_tray_z_axis)
DataPropertyAssertion(:hasVector_I :part_gasket_3_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gasket_3_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gasket_3_in_tray_z_axis "1"^^xsd:decimal)

# Individual: :part_gasket_3_location (:part_gasket_3_location)

ClassAssertion(:PoseLocationIn :part_gasket_3_location)
ObjectPropertyAssertion(:hasPhysicalLocation_RefObject :part_gasket_3_location :motoman_workstation)
ObjectPropertyAssertion(:hasPoseLocation_Pose :part_gasket_3_location :part_gasket_3_pose)

# Individual: :part_gasket_3_point (:part_gasket_3_point)

ClassAssertion(:Point :part_gasket_3_point)
DataPropertyAssertion(:hasPoint_X :part_gasket_3_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_gasket_3_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_gasket_3_point "0"^^xsd:decimal)

# Individual: :part_gasket_3_pose (:part_gasket_3_pose)

ClassAssertion(:Pose :part_gasket_3_pose)
ObjectPropertyAssertion(:hasPose_Point :part_gasket_3_pose :part_gasket_3_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_gasket_3_pose :part_gasket_3_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_gasket_3_pose :part_gasket_3_z_axis)

# Individual: :part_gasket_3_x_axis (:part_gasket_3_x_axis)

ClassAssertion(:Vector :part_gasket_3_x_axis)
DataPropertyAssertion(:hasVector_I :part_gasket_3_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gasket_3_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gasket_3_x_axis "0"^^xsd:decimal)

# Individual: :part_gasket_3_z_axis (:part_gasket_3_z_axis)

ClassAssertion(:Vector :part_gasket_3_z_axis)
DataPropertyAssertion(:hasVector_I :part_gasket_3_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gasket_3_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gasket_3_z_axis "1"^^xsd:decimal)

# Individual: :part_gasket_4 (:part_gasket_4)

ClassAssertion(:Part :part_gasket_4)
ObjectPropertyAssertion(:hasSkuObject_Sku :part_gasket_4 :sku_gasket_part)
ObjectPropertyAssertion(:hasSolidObject_PrimaryLocation :part_gasket_4 :part_gasket_4_location)
DataPropertyAssertion(:hasPart_SerialNumber :part_gasket_4 "4"^^xsd:NMTOKEN)

# Individual: :part_gasket_4_in_tray_point (:part_gasket_4_in_tray_point)

ClassAssertion(:Point :part_gasket_4_in_tray_point)
DataPropertyAssertion(:hasPoint_X :part_gasket_4_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_gasket_4_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_gasket_4_in_tray_point "0"^^xsd:decimal)

# Individual: :part_gasket_4_in_tray_pose (:part_gasket_4_in_tray_pose)

ClassAssertion(:Pose :part_gasket_4_in_tray_pose)
ObjectPropertyAssertion(:hasPose_Point :part_gasket_4_in_tray_pose :part_gasket_4_in_tray_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_gasket_4_in_tray_pose :part_gasket_4_in_tray_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_gasket_4_in_tray_pose :part_gasket_4_in_tray_z_axis)

# Individual: :part_gasket_4_in_tray_x_axis (:part_gasket_4_in_tray_x_axis)

ClassAssertion(:Vector :part_gasket_4_in_tray_x_axis)
DataPropertyAssertion(:hasVector_I :part_gasket_4_in_tray_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gasket_4_in_tray_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gasket_4_in_tray_x_axis "0"^^xsd:decimal)

# Individual: :part_gasket_4_in_tray_z_axis (:part_gasket_4_in_tray_z_axis)

ClassAssertion(:Vector :part_gasket_4_in_tray_z_axis)
DataPropertyAssertion(:hasVector_I :part_gasket_4_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gasket_4_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gasket_4_in_tray_z_axis "1"^^xsd:decimal)

# Individual: :part_gasket_4_location (:part_gasket_4_location)

ClassAssertion(:PoseLocationIn :part_gasket_4_location)
ObjectPropertyAssertion(:hasPhysicalLocation_RefObject :part_gasket_4_location :motoman_workstation)
ObjectPropertyAssertion(:hasPoseLocation_Pose :part_gasket_4_location :part_gasket_4_pose)

# Individual: :part_gasket_4_point (:part_gasket_4_point)

ClassAssertion(:Point :part_gasket_4_point)
DataPropertyAssertion(:hasPoint_X :part_gasket_4_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_gasket_4_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_gasket_4_point "0"^^xsd:decimal)

# Individual: :part_gasket_4_pose (:part_gasket_4_pose)

ClassAssertion(:Pose :part_gasket_4_pose)
ObjectPropertyAssertion(:hasPose_Point :part_gasket_4_pose :part_gasket_4_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_gasket_4_pose :part_gasket_4_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_gasket_4_pose :part_gasket_4_z_axis)

# Individual: :part_gasket_4_x_axis (:part_gasket_4_x_axis)

ClassAssertion(:Vector :part_gasket_4_x_axis)
DataPropertyAssertion(:hasVector_I :part_gasket_4_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gasket_4_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gasket_4_x_axis "0"^^xsd:decimal)

# Individual: :part_gasket_4_z_axis (:part_gasket_4_z_axis)

ClassAssertion(:Vector :part_gasket_4_z_axis)
DataPropertyAssertion(:hasVector_I :part_gasket_4_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gasket_4_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gasket_4_z_axis "1"^^xsd:decimal)

# Individual: :part_gear_1 (:part_gear_1)

ClassAssertion(:Part :part_gear_1)
ObjectPropertyAssertion(:hasSkuObject_Sku :part_gear_1 :sku_gear_part)
ObjectPropertyAssertion(:hasSolidObject_PrimaryLocation :part_gear_1 :part_gear_1_location)
DataPropertyAssertion(:hasPart_SerialNumber :part_gear_1 "sn:1"^^xsd:NMTOKEN)

# Individual: :part_gear_1_in_tray_point (:part_gear_1_in_tray_point)

ClassAssertion(:Point :part_gear_1_in_tray_point)
DataPropertyAssertion(:hasPoint_X :part_gear_1_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_gear_1_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_gear_1_in_tray_point "0"^^xsd:decimal)

# Individual: :part_gear_1_in_tray_pose (:part_gear_1_in_tray_pose)

ClassAssertion(:Pose :part_gear_1_in_tray_pose)
ObjectPropertyAssertion(:hasPose_Point :part_gear_1_in_tray_pose :part_gear_1_in_tray_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_gear_1_in_tray_pose :part_gear_1_in_tray_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_gear_1_in_tray_pose :part_gear_1_in_tray_z_axis)

# Individual: :part_gear_1_in_tray_x_axis (:part_gear_1_in_tray_x_axis)

ClassAssertion(:Vector :part_gear_1_in_tray_x_axis)
DataPropertyAssertion(:hasVector_I :part_gear_1_in_tray_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gear_1_in_tray_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gear_1_in_tray_x_axis "0"^^xsd:decimal)

# Individual: :part_gear_1_in_tray_z_axis (:part_gear_1_in_tray_z_axis)

ClassAssertion(:Vector :part_gear_1_in_tray_z_axis)
DataPropertyAssertion(:hasVector_I :part_gear_1_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gear_1_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gear_1_in_tray_z_axis "1"^^xsd:decimal)

# Individual: :part_gear_1_location (:part_gear_1_location)

ClassAssertion(:PoseLocationIn :part_gear_1_location)
ObjectPropertyAssertion(:hasPhysicalLocation_RefObject :part_gear_1_location :motoman_workstation)
ObjectPropertyAssertion(:hasPoseLocation_Pose :part_gear_1_location :part_gear_1_pose)

# Individual: :part_gear_1_point (:part_gear_1_point)

ClassAssertion(:Point :part_gear_1_point)
DataPropertyAssertion(:hasPoint_X :part_gear_1_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_gear_1_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_gear_1_point "0"^^xsd:decimal)

# Individual: :part_gear_1_pose (:part_gear_1_pose)

ClassAssertion(:Pose :part_gear_1_pose)
ObjectPropertyAssertion(:hasPose_Point :part_gear_1_pose :part_gear_1_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_gear_1_pose :part_gear_1_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_gear_1_pose :part_gear_1_z_axis)

# Individual: :part_gear_1_x_axis (:part_gear_1_x_axis)

ClassAssertion(:Vector :part_gear_1_x_axis)
DataPropertyAssertion(:hasVector_I :part_gear_1_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gear_1_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gear_1_x_axis "0"^^xsd:decimal)

# Individual: :part_gear_1_z_axis (:part_gear_1_z_axis)

ClassAssertion(:Vector :part_gear_1_z_axis)
DataPropertyAssertion(:hasVector_I :part_gear_1_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gear_1_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gear_1_z_axis "1"^^xsd:decimal)

# Individual: :part_gear_2 (:part_gear_2)

ClassAssertion(:Part :part_gear_2)
ObjectPropertyAssertion(:hasSkuObject_Sku :part_gear_2 :sku_gear_part)
ObjectPropertyAssertion(:hasSolidObject_PrimaryLocation :part_gear_2 :part_gear_2_location)
DataPropertyAssertion(:hasPart_SerialNumber :part_gear_2 "sn:2"^^xsd:NMTOKEN)

# Individual: :part_gear_2_in_tray_point (:part_gear_2_in_tray_point)

ClassAssertion(:Point :part_gear_2_in_tray_point)
DataPropertyAssertion(:hasPoint_X :part_gear_2_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_gear_2_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_gear_2_in_tray_point "0"^^xsd:decimal)

# Individual: :part_gear_2_in_tray_pose (:part_gear_2_in_tray_pose)

ClassAssertion(:Pose :part_gear_2_in_tray_pose)
ObjectPropertyAssertion(:hasPose_Point :part_gear_2_in_tray_pose :part_gear_2_in_tray_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_gear_2_in_tray_pose :part_gear_2_in_tray_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_gear_2_in_tray_pose :part_gear_1_in_tray_z_axis)

# Individual: :part_gear_2_in_tray_x_axis (:part_gear_2_in_tray_x_axis)

ClassAssertion(:Vector :part_gear_2_in_tray_x_axis)
DataPropertyAssertion(:hasVector_I :part_gear_2_in_tray_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gear_2_in_tray_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gear_2_in_tray_x_axis "0"^^xsd:decimal)

# Individual: :part_gear_2_in_tray_z_axis (:part_gear_2_in_tray_z_axis)

ClassAssertion(:Vector :part_gear_2_in_tray_z_axis)
DataPropertyAssertion(:hasVector_I :part_gear_2_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gear_2_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gear_2_in_tray_z_axis "1"^^xsd:decimal)

# Individual: :part_gear_2_location (:part_gear_2_location)

ClassAssertion(:PoseLocationIn :part_gear_2_location)
ObjectPropertyAssertion(:hasPhysicalLocation_RefObject :part_gear_2_location :motoman_workstation)
ObjectPropertyAssertion(:hasPoseLocation_Pose :part_gear_2_location :part_gear_2_pose)

# Individual: :part_gear_2_point (:part_gear_2_point)

ClassAssertion(:Point :part_gear_2_point)
DataPropertyAssertion(:hasPoint_X :part_gear_2_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_gear_2_point "0"^^xsd:integer)
DataPropertyAssertion(:hasPoint_Z :part_gear_2_point "0"^^xsd:integer)

# Individual: :part_gear_2_pose (:part_gear_2_pose)

ClassAssertion(:Pose :part_gear_2_pose)
ObjectPropertyAssertion(:hasPose_Point :part_gear_2_pose :part_gear_2_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_gear_2_pose :part_gear_2_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_gear_2_pose :part_gear_2_z_axis)

# Individual: :part_gear_2_x_axis (:part_gear_2_x_axis)

ClassAssertion(:Vector :part_gear_2_x_axis)
DataPropertyAssertion(:hasVector_I :part_gear_2_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gear_2_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gear_2_x_axis "0"^^xsd:decimal)

# Individual: :part_gear_2_z_axis (:part_gear_2_z_axis)

ClassAssertion(:Vector :part_gear_2_z_axis)
DataPropertyAssertion(:hasVector_I :part_gear_2_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gear_2_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gear_2_z_axis "1"^^xsd:decimal)

# Individual: :part_gear_3 (:part_gear_3)

ClassAssertion(:Part :part_gear_3)
ObjectPropertyAssertion(:hasSkuObject_Sku :part_gear_3 :sku_gear_part)
ObjectPropertyAssertion(:hasSolidObject_PrimaryLocation :part_gear_3 :part_gear_3_location)
DataPropertyAssertion(:hasPart_SerialNumber :part_gear_3 "sn:3"^^xsd:NMTOKEN)

# Individual: :part_gear_3_in_tray_point (:part_gear_3_in_tray_point)

ClassAssertion(:Point :part_gear_3_in_tray_point)
DataPropertyAssertion(:hasPoint_X :part_gear_3_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_gear_3_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_gear_3_in_tray_point "0"^^xsd:decimal)

# Individual: :part_gear_3_in_tray_pose (:part_gear_3_in_tray_pose)

ClassAssertion(:Pose :part_gear_3_in_tray_pose)
ObjectPropertyAssertion(:hasPose_Point :part_gear_3_in_tray_pose :part_gear_3_in_tray_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_gear_3_in_tray_pose :part_gear_3_in_tray_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_gear_3_in_tray_pose :part_gear_3_in_tray_z_axis)

# Individual: :part_gear_3_in_tray_x_axis (:part_gear_3_in_tray_x_axis)

ClassAssertion(:Vector :part_gear_3_in_tray_x_axis)
DataPropertyAssertion(:hasVector_I :part_gear_3_in_tray_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gear_3_in_tray_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gear_3_in_tray_x_axis "0"^^xsd:decimal)

# Individual: :part_gear_3_in_tray_z_axis (:part_gear_3_in_tray_z_axis)

ClassAssertion(:Vector :part_gear_3_in_tray_z_axis)
DataPropertyAssertion(:hasVector_I :part_gear_3_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gear_3_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gear_3_in_tray_z_axis "1"^^xsd:decimal)

# Individual: :part_gear_3_location (:part_gear_3_location)

ClassAssertion(:PoseLocationIn :part_gear_3_location)
ObjectPropertyAssertion(:hasPhysicalLocation_RefObject :part_gear_3_location :motoman_workstation)
ObjectPropertyAssertion(:hasPoseLocation_Pose :part_gear_3_location :part_gear_3_pose)

# Individual: :part_gear_3_point (:part_gear_3_point)

ClassAssertion(:Point :part_gear_3_point)
DataPropertyAssertion(:hasPoint_X :part_gear_3_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_gear_3_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_gear_3_point "0"^^xsd:decimal)

# Individual: :part_gear_3_pose (:part_gear_3_pose)

ClassAssertion(:Pose :part_gear_3_pose)
ObjectPropertyAssertion(:hasPose_Point :part_gear_3_pose :part_gear_3_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_gear_3_pose :part_gear_3_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_gear_3_pose :part_gear_3_z_axis)

# Individual: :part_gear_3_x_axis (:part_gear_3_x_axis)

ClassAssertion(:Vector :part_gear_3_x_axis)
DataPropertyAssertion(:hasVector_I :part_gear_3_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gear_3_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gear_3_x_axis "0"^^xsd:decimal)

# Individual: :part_gear_3_z_axis (:part_gear_3_z_axis)

ClassAssertion(:Vector :part_gear_3_z_axis)
DataPropertyAssertion(:hasVector_I :part_gear_3_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gear_3_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gear_3_z_axis "1"^^xsd:decimal)

# Individual: :part_gear_4 (:part_gear_4)

ClassAssertion(:Part :part_gear_4)
ObjectPropertyAssertion(:hasSkuObject_Sku :part_gear_4 :sku_gear_part)
ObjectPropertyAssertion(:hasSolidObject_PrimaryLocation :part_gear_4 :part_gear_4_location)
DataPropertyAssertion(:hasPart_SerialNumber :part_gear_4 "sn:4"^^xsd:NMTOKEN)

# Individual: :part_gear_4_in_tray_point (:part_gear_4_in_tray_point)

ClassAssertion(:Point :part_gear_4_in_tray_point)
DataPropertyAssertion(:hasPoint_X :part_gear_4_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_gear_4_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_gear_4_in_tray_point "0"^^xsd:decimal)

# Individual: :part_gear_4_in_tray_pose (:part_gear_4_in_tray_pose)

ClassAssertion(:Pose :part_gear_4_in_tray_pose)
ObjectPropertyAssertion(:hasPose_Point :part_gear_4_in_tray_pose :part_gear_4_in_tray_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_gear_4_in_tray_pose :part_gear_4_in_tray_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_gear_4_in_tray_pose :part_gear_4_in_tray_z_axis)

# Individual: :part_gear_4_in_tray_x_axis (:part_gear_4_in_tray_x_axis)

ClassAssertion(:Vector :part_gear_4_in_tray_x_axis)
DataPropertyAssertion(:hasVector_I :part_gear_4_in_tray_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gear_4_in_tray_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gear_4_in_tray_x_axis "0"^^xsd:decimal)

# Individual: :part_gear_4_in_tray_z_axis (:part_gear_4_in_tray_z_axis)

ClassAssertion(:Vector :part_gear_4_in_tray_z_axis)
DataPropertyAssertion(:hasVector_I :part_gear_4_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gear_4_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gear_4_in_tray_z_axis "1"^^xsd:decimal)

# Individual: :part_gear_4_location (:part_gear_4_location)

ClassAssertion(:PoseLocationIn :part_gear_4_location)
ObjectPropertyAssertion(:hasPhysicalLocation_RefObject :part_gear_4_location :motoman_workstation)
ObjectPropertyAssertion(:hasPoseLocation_Pose :part_gear_4_location :part_gear_4_pose)

# Individual: :part_gear_4_point (:part_gear_4_point)

ClassAssertion(:Point :part_gear_4_point)
DataPropertyAssertion(:hasPoint_X :part_gear_4_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_gear_4_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_gear_4_point "0"^^xsd:decimal)

# Individual: :part_gear_4_pose (:part_gear_4_pose)

ClassAssertion(:Pose :part_gear_4_pose)
ObjectPropertyAssertion(:hasPose_Point :part_gear_4_pose :part_gear_4_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_gear_4_pose :part_gear_4_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_gear_4_pose :part_gear_4_z_axis)

# Individual: :part_gear_4_x_axis (:part_gear_4_x_axis)

ClassAssertion(:Vector :part_gear_4_x_axis)
DataPropertyAssertion(:hasVector_I :part_gear_4_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gear_4_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gear_4_x_axis "0"^^xsd:decimal)

# Individual: :part_gear_4_z_axis (:part_gear_4_z_axis)

ClassAssertion(:Vector :part_gear_4_z_axis)
DataPropertyAssertion(:hasVector_I :part_gear_4_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_gear_4_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_gear_4_z_axis "1"^^xsd:decimal)

# Individual: :part_in_tray_tolerance (:part_in_tray_tolerance)

ClassAssertion(:PoseTolerance :part_in_tray_tolerance)
DataPropertyAssertion(:hasPoseTolerance_XPointTolerance :part_in_tray_tolerance "0.005"^^xsd:decimal)
DataPropertyAssertion(:hasPoseTolerance_YPointTolerance :part_in_tray_tolerance "0.005"^^xsd:decimal)

# Individual: :part_piston_rod_1 (:part_piston_rod_1)

ClassAssertion(:Part :part_piston_rod_1)
ObjectPropertyAssertion(:hasSkuObject_Sku :part_piston_rod_1 :sku_piston_rod_part)
ObjectPropertyAssertion(:hasSolidObject_PrimaryLocation :part_piston_rod_1 :part_piston_rod_1_location)
DataPropertyAssertion(:hasPart_SerialNumber :part_piston_rod_1 "sn:1"^^xsd:NMTOKEN)

# Individual: :part_piston_rod_1_in_tray_point (:part_piston_rod_1_in_tray_point)

ClassAssertion(:Point :part_piston_rod_1_in_tray_point)
DataPropertyAssertion(:hasPoint_X :part_piston_rod_1_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_piston_rod_1_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_piston_rod_1_in_tray_point "0"^^xsd:decimal)

# Individual: :part_piston_rod_1_in_tray_pose (:part_piston_rod_1_in_tray_pose)

ClassAssertion(:Pose :part_piston_rod_1_in_tray_pose)
ObjectPropertyAssertion(:hasPose_Point :part_piston_rod_1_in_tray_pose :part_piston_rod_1_in_tray_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_piston_rod_1_in_tray_pose :part_piston_rod_1_in_tray_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_piston_rod_1_in_tray_pose :part_piston_rod_1_in_tray_z_axis)

# Individual: :part_piston_rod_1_in_tray_x_axis (:part_piston_rod_1_in_tray_x_axis)

ClassAssertion(:Vector :part_piston_rod_1_in_tray_x_axis)
DataPropertyAssertion(:hasVector_I :part_piston_rod_1_in_tray_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_piston_rod_1_in_tray_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_piston_rod_1_in_tray_x_axis "0"^^xsd:decimal)

# Individual: :part_piston_rod_1_in_tray_z_axis (:part_piston_rod_1_in_tray_z_axis)

ClassAssertion(:Vector :part_piston_rod_1_in_tray_z_axis)
DataPropertyAssertion(:hasVector_I :part_piston_rod_1_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_piston_rod_1_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_piston_rod_1_in_tray_z_axis "1"^^xsd:decimal)

# Individual: :part_piston_rod_1_location (:part_piston_rod_1_location)

ClassAssertion(:PoseLocationIn :part_piston_rod_1_location)
ObjectPropertyAssertion(:hasPhysicalLocation_RefObject :part_piston_rod_1_location :motoman_workstation)
ObjectPropertyAssertion(:hasPoseLocation_Pose :part_piston_rod_1_location :part_piston_rod_1_pose)

# Individual: :part_piston_rod_1_point (:part_piston_rod_1_point)

ClassAssertion(:Point :part_piston_rod_1_point)
DataPropertyAssertion(:hasPoint_X :part_piston_rod_1_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_piston_rod_1_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_piston_rod_1_point "0"^^xsd:decimal)

# Individual: :part_piston_rod_1_pose (:part_piston_rod_1_pose)

ClassAssertion(:Pose :part_piston_rod_1_pose)
ObjectPropertyAssertion(:hasPose_Point :part_piston_rod_1_pose :part_piston_rod_1_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_piston_rod_1_pose :part_piston_rod_1_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_piston_rod_1_pose :part_piston_rod_1_z_axis)

# Individual: :part_piston_rod_1_x_axis (:part_piston_rod_1_x_axis)

ClassAssertion(:Vector :part_piston_rod_1_x_axis)
DataPropertyAssertion(:hasVector_I :part_piston_rod_1_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_piston_rod_1_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_piston_rod_1_x_axis "0"^^xsd:decimal)

# Individual: :part_piston_rod_1_z_axis (:part_piston_rod_1_z_axis)

ClassAssertion(:Vector :part_piston_rod_1_z_axis)
DataPropertyAssertion(:hasVector_I :part_piston_rod_1_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_piston_rod_1_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_piston_rod_1_z_axis "1"^^xsd:decimal)

# Individual: :part_piston_rod_2 (:part_piston_rod_2)

ClassAssertion(:Part :part_piston_rod_2)
ObjectPropertyAssertion(:hasSkuObject_Sku :part_piston_rod_2 :sku_piston_rod_part)
ObjectPropertyAssertion(:hasSolidObject_PrimaryLocation :part_piston_rod_2 :part_piston_rod_2_location)
DataPropertyAssertion(:hasPart_SerialNumber :part_piston_rod_2 "sn:2"^^xsd:NMTOKEN)

# Individual: :part_piston_rod_2_in_tray_point (:part_piston_rod_2_in_tray_point)

ClassAssertion(:Point :part_piston_rod_2_in_tray_point)
DataPropertyAssertion(:hasPoint_X :part_piston_rod_2_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_piston_rod_2_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_piston_rod_2_in_tray_point "0"^^xsd:decimal)

# Individual: :part_piston_rod_2_in_tray_pose (:part_piston_rod_2_in_tray_pose)

ClassAssertion(:Pose :part_piston_rod_2_in_tray_pose)
ObjectPropertyAssertion(:hasPose_Point :part_piston_rod_2_in_tray_pose :part_piston_rod_2_in_tray_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_piston_rod_2_in_tray_pose :part_piston_rod_2_in_tray_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_piston_rod_2_in_tray_pose :part_piston_rod_2_in_tray_z_axis)

# Individual: :part_piston_rod_2_in_tray_x_axis (:part_piston_rod_2_in_tray_x_axis)

ClassAssertion(:Vector :part_piston_rod_2_in_tray_x_axis)
DataPropertyAssertion(:hasVector_I :part_piston_rod_2_in_tray_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_piston_rod_2_in_tray_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_piston_rod_2_in_tray_x_axis "0"^^xsd:decimal)

# Individual: :part_piston_rod_2_in_tray_z_axis (:part_piston_rod_2_in_tray_z_axis)

ClassAssertion(:Vector :part_piston_rod_2_in_tray_z_axis)
DataPropertyAssertion(:hasVector_I :part_piston_rod_2_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_piston_rod_2_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_piston_rod_2_in_tray_z_axis "1"^^xsd:decimal)

# Individual: :part_piston_rod_2_location (:part_piston_rod_2_location)

ClassAssertion(:PoseLocationIn :part_piston_rod_2_location)
ObjectPropertyAssertion(:hasPhysicalLocation_RefObject :part_piston_rod_2_location :motoman_workstation)
ObjectPropertyAssertion(:hasPoseLocation_Pose :part_piston_rod_2_location :part_piston_rod_2_pose)

# Individual: :part_piston_rod_2_point (:part_piston_rod_2_point)

ClassAssertion(:Point :part_piston_rod_2_point)
DataPropertyAssertion(:hasPoint_X :part_piston_rod_2_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_piston_rod_2_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_piston_rod_2_point "0"^^xsd:decimal)

# Individual: :part_piston_rod_2_pose (:part_piston_rod_2_pose)

ClassAssertion(:Pose :part_piston_rod_2_pose)
ObjectPropertyAssertion(:hasPose_Point :part_piston_rod_2_pose :part_piston_rod_2_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_piston_rod_2_pose :part_piston_rod_2_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_piston_rod_2_pose :part_piston_rod_2_z_axis)

# Individual: :part_piston_rod_2_x_axis (:part_piston_rod_2_x_axis)

ClassAssertion(:Vector :part_piston_rod_2_x_axis)
DataPropertyAssertion(:hasVector_I :part_piston_rod_2_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_piston_rod_2_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_piston_rod_2_x_axis "0"^^xsd:decimal)

# Individual: :part_piston_rod_2_z_axis (:part_piston_rod_2_z_axis)

ClassAssertion(:Vector :part_piston_rod_2_z_axis)
DataPropertyAssertion(:hasVector_I :part_piston_rod_2_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_piston_rod_2_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_piston_rod_2_z_axis "1"^^xsd:decimal)

# Individual: :part_piston_rod_3 (:part_piston_rod_3)

ClassAssertion(:Part :part_piston_rod_3)
ObjectPropertyAssertion(:hasSkuObject_Sku :part_piston_rod_3 :sku_piston_rod_part)
ObjectPropertyAssertion(:hasSolidObject_PrimaryLocation :part_piston_rod_3 :part_piston_rod_3_location)
DataPropertyAssertion(:hasPart_SerialNumber :part_piston_rod_3 "sn:3"^^xsd:NMTOKEN)

# Individual: :part_piston_rod_3_in_tray_point (:part_piston_rod_3_in_tray_point)

ClassAssertion(:Point :part_piston_rod_3_in_tray_point)
DataPropertyAssertion(:hasPoint_X :part_piston_rod_3_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_piston_rod_3_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_piston_rod_3_in_tray_point "0"^^xsd:decimal)

# Individual: :part_piston_rod_3_in_tray_pose (:part_piston_rod_3_in_tray_pose)

ClassAssertion(:Pose :part_piston_rod_3_in_tray_pose)
ObjectPropertyAssertion(:hasPose_Point :part_piston_rod_3_in_tray_pose :part_piston_rod_3_in_tray_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_piston_rod_3_in_tray_pose :part_piston_rod_3_in_tray_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_piston_rod_3_in_tray_pose :part_piston_rod_3_in_tray_z_axis)

# Individual: :part_piston_rod_3_in_tray_x_axis (:part_piston_rod_3_in_tray_x_axis)

ClassAssertion(:Vector :part_piston_rod_3_in_tray_x_axis)
DataPropertyAssertion(:hasVector_I :part_piston_rod_3_in_tray_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_piston_rod_3_in_tray_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_piston_rod_3_in_tray_x_axis "0"^^xsd:decimal)

# Individual: :part_piston_rod_3_in_tray_z_axis (:part_piston_rod_3_in_tray_z_axis)

ClassAssertion(:Vector :part_piston_rod_3_in_tray_z_axis)
DataPropertyAssertion(:hasVector_I :part_piston_rod_3_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_piston_rod_3_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_piston_rod_3_in_tray_z_axis "1"^^xsd:decimal)

# Individual: :part_piston_rod_3_location (:part_piston_rod_3_location)

ClassAssertion(:PoseLocationIn :part_piston_rod_3_location)
ObjectPropertyAssertion(:hasPhysicalLocation_RefObject :part_piston_rod_3_location :motoman_workstation)
ObjectPropertyAssertion(:hasPoseLocation_Pose :part_piston_rod_3_location :part_piston_rod_3_pose)

# Individual: :part_piston_rod_3_point (:part_piston_rod_3_point)

ClassAssertion(:Point :part_piston_rod_3_point)
DataPropertyAssertion(:hasPoint_X :part_piston_rod_3_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_piston_rod_3_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_piston_rod_3_point "0"^^xsd:decimal)

# Individual: :part_piston_rod_3_pose (:part_piston_rod_3_pose)

ClassAssertion(:Pose :part_piston_rod_3_pose)
ObjectPropertyAssertion(:hasPose_Point :part_piston_rod_3_pose :part_piston_rod_3_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_piston_rod_3_pose :part_piston_rod_3_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_piston_rod_3_pose :part_piston_rod_3_z_axis)

# Individual: :part_piston_rod_3_x_axis (:part_piston_rod_3_x_axis)

ClassAssertion(:Vector :part_piston_rod_3_x_axis)
DataPropertyAssertion(:hasVector_I :part_piston_rod_3_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_piston_rod_3_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_piston_rod_3_x_axis "0"^^xsd:decimal)

# Individual: :part_piston_rod_3_z_axis (:part_piston_rod_3_z_axis)

ClassAssertion(:Vector :part_piston_rod_3_z_axis)
DataPropertyAssertion(:hasVector_I :part_piston_rod_3_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_piston_rod_3_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_piston_rod_3_z_axis "1"^^xsd:decimal)

# Individual: :part_piston_rod_4 (:part_piston_rod_4)

ClassAssertion(:Part :part_piston_rod_4)
ObjectPropertyAssertion(:hasSkuObject_Sku :part_piston_rod_4 :sku_piston_rod_part)
ObjectPropertyAssertion(:hasSolidObject_PrimaryLocation :part_piston_rod_4 :part_piston_rod_4_location)
DataPropertyAssertion(:hasPart_SerialNumber :part_piston_rod_4 "sn:4"^^xsd:NMTOKEN)

# Individual: :part_piston_rod_4_in_tray_point (:part_piston_rod_4_in_tray_point)

ClassAssertion(:Point :part_piston_rod_4_in_tray_point)
DataPropertyAssertion(:hasPoint_X :part_piston_rod_4_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_piston_rod_4_in_tray_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_piston_rod_4_in_tray_point "0"^^xsd:decimal)

# Individual: :part_piston_rod_4_in_tray_pose (:part_piston_rod_4_in_tray_pose)

ClassAssertion(:Pose :part_piston_rod_4_in_tray_pose)
ObjectPropertyAssertion(:hasPose_Point :part_piston_rod_4_in_tray_pose :part_piston_rod_4_in_tray_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_piston_rod_4_in_tray_pose :part_piston_rod_4_in_tray_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_piston_rod_4_in_tray_pose :part_piston_rod_4_in_tray_z_axis)

# Individual: :part_piston_rod_4_in_tray_x_axis (:part_piston_rod_4_in_tray_x_axis)

ClassAssertion(:Vector :part_piston_rod_4_in_tray_x_axis)
DataPropertyAssertion(:hasVector_I :part_piston_rod_4_in_tray_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_piston_rod_4_in_tray_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_piston_rod_4_in_tray_x_axis "0"^^xsd:decimal)

# Individual: :part_piston_rod_4_in_tray_z_axis (:part_piston_rod_4_in_tray_z_axis)

ClassAssertion(:Vector :part_piston_rod_4_in_tray_z_axis)
DataPropertyAssertion(:hasVector_I :part_piston_rod_4_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_piston_rod_4_in_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_piston_rod_4_in_tray_z_axis "1"^^xsd:decimal)

# Individual: :part_piston_rod_4_location (:part_piston_rod_4_location)

ClassAssertion(:PoseLocationIn :part_piston_rod_4_location)
ObjectPropertyAssertion(:hasPhysicalLocation_RefObject :part_piston_rod_4_location :motoman_workstation)
ObjectPropertyAssertion(:hasPoseLocation_Pose :part_piston_rod_4_location :part_piston_rod_4_pose)

# Individual: :part_piston_rod_4_point (:part_piston_rod_4_point)

ClassAssertion(:Point :part_piston_rod_4_point)
DataPropertyAssertion(:hasPoint_X :part_piston_rod_4_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :part_piston_rod_4_point "0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :part_piston_rod_4_point "0"^^xsd:decimal)

# Individual: :part_piston_rod_4_pose (:part_piston_rod_4_pose)

ClassAssertion(:Pose :part_piston_rod_4_pose)
ObjectPropertyAssertion(:hasPose_Point :part_piston_rod_4_pose :part_piston_rod_4_point)
ObjectPropertyAssertion(:hasPose_XAxis :part_piston_rod_4_pose :part_piston_rod_4_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :part_piston_rod_4_pose :part_piston_rod_4_z_axis)

# Individual: :part_piston_rod_4_x_axis (:part_piston_rod_4_x_axis)

ClassAssertion(:Vector :part_piston_rod_4_x_axis)
DataPropertyAssertion(:hasVector_I :part_piston_rod_4_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_piston_rod_4_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_piston_rod_4_x_axis "0"^^xsd:decimal)

# Individual: :part_piston_rod_4_z_axis (:part_piston_rod_4_z_axis)

ClassAssertion(:Vector :part_piston_rod_4_z_axis)
DataPropertyAssertion(:hasVector_I :part_piston_rod_4_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :part_piston_rod_4_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :part_piston_rod_4_z_axis "1"^^xsd:decimal)

# Individual: :piston_rod_part_shape (:piston_rod_part_shape)

ClassAssertion(:ExternalShape :piston_rod_part_shape)
DataPropertyAssertion(:hasExternalShape_ModelFileName :piston_rod_part_shape "piston_rod_part"^^xsd:string)
DataPropertyAssertion(:hasExternalShape_ModelFormatName :piston_rod_part_shape "dae"^^xsd:string)
DataPropertyAssertion(:hasShapeDesign_Description :piston_rod_part_shape "shape of piston rod parts"^^xsd:string)

# Individual: :piston_rod_tray (:piston_rod_tray)

ClassAssertion(:PartsTray :piston_rod_tray)
ObjectPropertyAssertion(:hasPartsTray_Design :piston_rod_tray :design_piston_rod_tray)
ObjectPropertyAssertion(:hasSkuObject_Sku :piston_rod_tray :sku_piston_rod_vessel)
ObjectPropertyAssertion(:hasSolidObject_PrimaryLocation :piston_rod_tray :piston_rod_tray_location)
DataPropertyAssertion(:hasPartsTray_Complete :piston_rod_tray "true"^^xsd:boolean)
DataPropertyAssertion(:hasPartsVessel_SerialNumber :piston_rod_tray "PistonRodTray"^^xsd:NMTOKEN)

# Individual: :piston_rod_tray_location (:piston_rod_tray_location)

ClassAssertion(:PoseLocationOn :piston_rod_tray_location)
ObjectPropertyAssertion(:hasPhysicalLocation_RefObject :piston_rod_tray_location :optical_table)
ObjectPropertyAssertion(:hasPoseLocation_Pose :piston_rod_tray_location :piston_rod_tray_pose)

# Individual: :piston_rod_tray_point (:piston_rod_tray_point)

ClassAssertion(:Point :piston_rod_tray_point)
DataPropertyAssertion(:hasPoint_X :piston_rod_tray_point "0.0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Y :piston_rod_tray_point "0.0"^^xsd:decimal)
DataPropertyAssertion(:hasPoint_Z :piston_rod_tray_point "0.0"^^xsd:decimal)

# Individual: :piston_rod_tray_pose (:piston_rod_tray_pose)

ClassAssertion(:Pose :piston_rod_tray_pose)
ObjectPropertyAssertion(:hasPose_Point :piston_rod_tray_pose :piston_rod_tray_point)
ObjectPropertyAssertion(:hasPose_XAxis :piston_rod_tray_pose :piston_rod_tray_x_axis)
ObjectPropertyAssertion(:hasPose_ZAxis :piston_rod_tray_pose :piston_rod_tray_z_axis)

# Individual: :piston_rod_tray_shape (:piston_rod_tray_shape)

ClassAssertion(:BoxyShape :piston_rod_tray_shape)
DataPropertyAssertion(:hasBoxyShape_HasTop :piston_rod_tray_shape "false"^^xsd:boolean)
DataPropertyAssertion(:hasBoxyShape_Height :piston_rod_tray_shape "1.0"^^xsd:decimal)
DataPropertyAssertion(:hasBoxyShape_Length :piston_rod_tray_shape "1.0"^^xsd:decimal)
DataPropertyAssertion(:hasBoxyShape_Width :piston_rod_tray_shape "1.0"^^xsd:decimal)
DataPropertyAssertion(:hasShapeDesign_Description :piston_rod_tray_shape "Shape for trays that hold piston rod parts"^^xsd:string)

# Individual: :piston_rod_tray_slot_1 (:piston_rod_tray_slot_1)

ClassAssertion(:Slot :piston_rod_tray_slot_1)
ObjectPropertyAssertion(:hasSlot_Part :piston_rod_tray_slot_1 :part_piston_rod_1)
ObjectPropertyAssertion(:hasSlot_PartRefAndPose :piston_rod_tray_slot_1 :prap_piston_rod_1)
DataPropertyAssertion(:hasSlot_ID :piston_rod_tray_slot_1 "1"^^xsd:integer)
DataPropertyAssertion(:hasSlot_IsOccupied :piston_rod_tray_slot_1 "true"^^xsd:boolean)

# Individual: :piston_rod_tray_slot_2 (:piston_rod_tray_slot_2)

ClassAssertion(:Slot :piston_rod_tray_slot_2)
ObjectPropertyAssertion(:hasSlot_Part :piston_rod_tray_slot_2 :part_piston_rod_2)
ObjectPropertyAssertion(:hasSlot_PartRefAndPose :piston_rod_tray_slot_2 :prap_piston_rod_2)
DataPropertyAssertion(:hasSlot_ID :piston_rod_tray_slot_2 "2"^^xsd:integer)
DataPropertyAssertion(:hasSlot_IsOccupied :piston_rod_tray_slot_2 "true"^^xsd:boolean)

# Individual: :piston_rod_tray_slot_3 (:piston_rod_tray_slot_3)

ClassAssertion(:Slot :piston_rod_tray_slot_3)
ObjectPropertyAssertion(:hasSlot_Part :piston_rod_tray_slot_3 :part_piston_rod_3)
ObjectPropertyAssertion(:hasSlot_PartRefAndPose :piston_rod_tray_slot_3 :prap_piston_rod_3)
DataPropertyAssertion(:hasSlot_ID :piston_rod_tray_slot_3 "3"^^xsd:integer)
DataPropertyAssertion(:hasSlot_IsOccupied :piston_rod_tray_slot_3 "true"^^xsd:boolean)

# Individual: :piston_rod_tray_slot_4 (:piston_rod_tray_slot_4)

ClassAssertion(:Slot :piston_rod_tray_slot_4)
ObjectPropertyAssertion(:hasSlot_Part :piston_rod_tray_slot_4 :part_piston_rod_4)
ObjectPropertyAssertion(:hasSlot_PartRefAndPose :piston_rod_tray_slot_4 :prap_piston_rod_4)
DataPropertyAssertion(:hasSlot_ID :piston_rod_tray_slot_4 "4"^^xsd:integer)
DataPropertyAssertion(:hasSlot_IsOccupied :piston_rod_tray_slot_4 "true"^^xsd:boolean)

# Individual: :piston_rod_tray_x_axis (:piston_rod_tray_x_axis)

ClassAssertion(:Vector :piston_rod_tray_x_axis)
DataPropertyAssertion(:hasVector_I :piston_rod_tray_x_axis "1"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :piston_rod_tray_x_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :piston_rod_tray_x_axis "0"^^xsd:decimal)

# Individual: :piston_rod_tray_z_axis (:piston_rod_tray_z_axis)

ClassAssertion(:Vector :piston_rod_tray_z_axis)
DataPropertyAssertion(:hasVector_I :piston_rod_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_J :piston_rod_tray_z_axis "0"^^xsd:decimal)
DataPropertyAssertion(:hasVector_K :piston_rod_tray_z_axis "1"^^xsd:decimal)

# Individual: :prap_gasket_1 (:prap_gasket_1)

ClassAssertion(:PartRefAndPose :prap_gasket_1)
ObjectPropertyAssertion(:hasPartRefAndPose_Pose :prap_gasket_1 :part_gasket_1_in_tray_pose)
ObjectPropertyAssertion(:hasPartRefAndPose_Sku :prap_gasket_1 :sku_gasket_part)

# Individual: :prap_gasket_2 (:prap_gasket_2)

ClassAssertion(:PartRefAndPose :prap_gasket_2)
ObjectPropertyAssertion(:hasPartRefAndPose_Pose :prap_gasket_2 :part_gasket_2_in_tray_pose)
ObjectPropertyAssertion(:hasPartRefAndPose_Sku :prap_gasket_2 :sku_gasket_part)

# Individual: :prap_gasket_3 (:prap_gasket_3)

ClassAssertion(:PartRefAndPose :prap_gasket_3)
ObjectPropertyAssertion(:hasPartRefAndPose_Pose :prap_gasket_3 :part_gasket_3_in_tray_pose)
ObjectPropertyAssertion(:hasPartRefAndPose_Sku :prap_gasket_3 :sku_gasket_part)

# Individual: :prap_gasket_4 (:prap_gasket_4)

ClassAssertion(:PartRefAndPose :prap_gasket_4)
ObjectPropertyAssertion(:hasPartRefAndPose_Pose :prap_gasket_4 :part_gasket_4_in_tray_pose)
ObjectPropertyAssertion(:hasPartRefAndPose_Sku :prap_gasket_4 :sku_gear_part)

# Individual: :prap_gear_1 (:prap_gear_1)

ClassAssertion(:PartRefAndPose :prap_gear_1)
ObjectPropertyAssertion(:hasPartRefAndPose_Pose :prap_gear_1 :part_gear_1_in_tray_pose)
ObjectPropertyAssertion(:hasPartRefAndPose_Sku :prap_gear_1 :sku_gear_part)

# Individual: :prap_gear_2 (:prap_gear_2)

ClassAssertion(:PartRefAndPose :prap_gear_2)
ObjectPropertyAssertion(:hasPartRefAndPose_Pose :prap_gear_2 :part_gear_2_in_tray_pose)
ObjectPropertyAssertion(:hasPartRefAndPose_Sku :prap_gear_2 :sku_gear_part)

# Individual: :prap_gear_3 (:prap_gear_3)

ClassAssertion(:PartRefAndPose :prap_gear_3)
ObjectPropertyAssertion(:hasPartRefAndPose_Pose :prap_gear_3 :part_gear_3_in_tray_pose)
ObjectPropertyAssertion(:hasPartRefAndPose_Sku :prap_gear_3 :sku_gear_part)

# Individual: :prap_gear_4 (:prap_gear_4)

ClassAssertion(:PartRefAndPose :prap_gear_4)
ObjectPropertyAssertion(:hasPartRefAndPose_Pose :prap_gear_4 :part_gear_4_in_tray_pose)
ObjectPropertyAssertion(:hasPartRefAndPose_Sku :prap_gear_4 :sku_gear_part)

# Individual: :prap_piston_rod_1 (:prap_piston_rod_1)

ClassAssertion(:PartRefAndPose :prap_piston_rod_1)
ObjectPropertyAssertion(:hasPartRefAndPose_Pose :prap_piston_rod_1 :part_piston_rod_1_in_tray_pose)
ObjectPropertyAssertion(:hasPartRefAndPose_Sku :prap_piston_rod_1 :sku_piston_rod_part)

# Individual: :prap_piston_rod_2 (:prap_piston_rod_2)

ClassAssertion(:PartRefAndPose :prap_piston_rod_2)
ObjectPropertyAssertion(:hasPartRefAndPose_Pose :prap_piston_rod_2 :part_piston_rod_2_in_tray_pose)
ObjectPropertyAssertion(:hasPartRefAndPose_Sku :prap_piston_rod_2 :sku_piston_rod_part)

# Individual: :prap_piston_rod_3 (:prap_piston_rod_3)

ClassAssertion(:PartRefAndPose :prap_piston_rod_3)
ObjectPropertyAssertion(:hasPartRefAndPose_Pose :prap_piston_rod_3 :part_piston_rod_3_in_tray_pose)
ObjectPropertyAssertion(:hasPartRefAndPose_Sku :prap_piston_rod_3 :sku_piston_rod_part)

# Individual: :prap_piston_rod_4 (:prap_piston_rod_4)

ClassAssertion(:PartRefAndPose :prap_piston_rod_4)
ObjectPropertyAssertion(:hasPartRefAndPose_Pose :prap_piston_rod_4 :part_piston_rod_4_in_tray_pose)
ObjectPropertyAssertion(:hasPartRefAndPose_Sku :prap_piston_rod_4 :sku_piston_rod_part)

# Individual: :relative_location_in_1 (:relative_location_in_1)

ClassAssertion(:RelativeLocationIn :relative_location_in_1)
ObjectPropertyAssertion(:hasPhysicalLocation_RefObject :relative_location_in_1 :motoman_workstation)
DataPropertyAssertion(:hasRelativeLocationIn_Description :relative_location_in_1 "The  KittingWorkstation is in motoman_workstation"^^xsd:string)

# Individual: :sku_gasket_part (:sku_gasket_part)

ClassAssertion(:StockKeepingUnit :sku_gasket_part)
DataPropertyAssertion(:hasStockKeepingUnit_Description :sku_gasket_part "SKU for gasket type parts"^^xsd:string)

# Individual: :sku_gasket_vessel (:sku_gasket_vessel)

ClassAssertion(:StockKeepingUnit :sku_gasket_vessel)
DataPropertyAssertion(:hasStockKeepingUnit_Description :sku_gasket_vessel "Stock keeping unit for trays that hold gasket parts"^^xsd:string)

# Individual: :sku_gear_part (:sku_gear_part)

ClassAssertion(:StockKeepingUnit :sku_gear_part)
DataPropertyAssertion(:hasStockKeepingUnit_Description :sku_gear_part "SKU for gear type parts"^^xsd:string)

# Individual: :sku_gear_vessel (:sku_gear_vessel)

ClassAssertion(:StockKeepingUnit :sku_gear_vessel)
DataPropertyAssertion(:hasStockKeepingUnit_Description :sku_gear_vessel "Stock keeping unit for trays that hold gear parts"^^xsd:string)

# Individual: :sku_kit_vessel (:sku_kit_vessel)

ClassAssertion(:StockKeepingUnit :sku_kit_vessel)
DataPropertyAssertion(:hasStockKeepingUnit_Description :sku_kit_vessel "Stock keeping unit for trays that are specifically used to build kits"^^xsd:string)

# Individual: :sku_piston_rod_part (:sku_piston_rod_part)

ClassAssertion(:StockKeepingUnit :sku_piston_rod_part)
DataPropertyAssertion(:hasStockKeepingUnit_Description :sku_piston_rod_part "SKU for piston rod type parts"^^xsd:string)

# Individual: :sku_piston_rod_vessel (:sku_piston_rod_vessel)

ClassAssertion(:StockKeepingUnit :sku_piston_rod_vessel)
DataPropertyAssertion(:hasStockKeepingUnit_Description :sku_piston_rod_vessel "Stock keeping unit for trays that hold piston rod parts"^^xsd:string)


HasKey(:LargeContainer (:hasSkuObject_Sku) (:hasLargeContainer_SerialNumber))
HasKey(:Part (:hasSkuObject_Sku) (:hasPart_SerialNumber))
HasKey(:PartsVessel (:hasSkuObject_Sku) (:hasPartsVessel_SerialNumber))
AnnotationAssertion(rdfs:comment :decimal "The NonNegativeDecimal specifies a non-negative decimal value.")
)